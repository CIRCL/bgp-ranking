*** Database 0 ***

Contains only temporary information originating from the modules, and some helper keys.

# Helpers

uid: it is an integer, autoincremented 
When a module has a new entry to insert in the system, it increments this keys and use the integer as unique key. 

uid_list: it is a set of uid. It indexes all the new entries that the next process will insert in the system. 

Tips: 
To know the number of entries to insert in the system, do: 
	redis-cli -n 0 scard uid_list
If the key does not exists (the last command returns 0), there is no entries to insert. 

ris: a set of IPs. We want to know the RIS information for all the IPs in the set.
Note: the set may contains IPs that are already cached, it is not a problem: they will be automatically dropped by the fetching process. 

To know the number of RIS entries to fetch : redis-cli -n 0 scard ris

whois: same as ris but for the Whois information

# Temporaries information

All the information coming from the modules will have the following format: 
	<integer>|<string>
integer is an uid
string can be one of the following: 
	ip
	source
	timestamp
	infection
	raw
	times

If you see that there is a few keys in the database but uid_list does not exists, it is probably that you stop the processing of the new entries when it was running.
All the keys like <integer>|<string> can be dropped, they will never be inserted anymore. 


*** Databases 1 and 2 ***

This databases are completely volatile, db1 is a cache for the RIS Whois entries and db2 for Whois entries, they are cached 24 hours. 
The keys are IPs and the values are (RIS) Whois entries.

The two databases runs on their own redis instance. 


*** Database 3 ***

This database is also temporary: it is used by the ranking process to dump the routing information provided by the RIPE. 

In a first time, the database contains only sets. The keys of the sets are ASN and they contains all the subnets announced by a particular AS. 

During the ranking, the total number of IPs announced by an AS is computed and also saved in the database. The keys have this format: 
	<asn>|rankv4
	<asn>|rankv6
and contains an integer.

The database is dropped when the ranking is computed.


*** Database 4 ***

Contains a sort of hash to find the right server to ask when you have an IP. It also contains information on arguments to pass when you do queries on some servers. 

You probably do not want to know anything more about it. (it needs some refactoring)

Last thing to know: if this database if not initialized, the system will not be able to do the RIS queries. 


*** Database 5 ***

From now, it will be fun. 

This database contains all the static information from the modules and the ASNs

# First state

As we already know, the information from the modules comes in a "raw" format in db1. 
At this point, we always know the IP, the source and a date. If the date is given in the dataset, this one is used, elsewhere, it will be 'today'.

## Sets: 
<day>|sources: contains all the sources for a particular day
temp|<day>|<source>|<ip_type>: temporary set of IPs for a day, by source. ip_type can be v4 of v6. The values are <ip>|<timestamp>, with the timestamp of the dataset or "today at midnight" if none has been found.

no_asn: a temporary set containing all the temp keys: temp|<day>|<source>|<ip_type>, until they are empty. 
Each IP is also inserted in the set ris of db1.

## Keys: 
A key is inserted only if there is more information (an infection, an number of times, a raw stuff) provided by the dataset.
A key looks like this: 
<ip>|<timestamp>|{infection,times,raw} 
And the value is the one given by the module. 

# Second state

At this point, the information from the modules are in the database, we have insert the other information (RIS and Whois).

# Ris
Using the keys generated in the First state and no_asn, we try to get the RIS entries from db1. 

Then we will create new ASN objects with this format: 
<asn>|<timestamp>|ip_block -> 0.0.0.0/0
<asn>|<timestamp>|description -> Description

and we add to a set called 
	<asn>
a new value <timestamp>

We do not want more than one occurrence of each block and we ensure it by checking if the block and the description is already there. 
Hint: mget on each <asn>|<timestamp>|ip_block of an ASN and if the block is found, comparing with the description. 


Note: if the ASN has been set to -1 (the IP is invalid, has no information on the RIS Whois server), we use a default AS object. 

We have to create three more indexes after we know the ASN of an IP: 
	<date>|<source>|index_asns_details -> set of <asn>|<timestamp>
		used to compute the ranking
		will be used to display the ranking by subnet
	<date>|<source>|index_asns -> set of <asn>
		used to find the list of ASNs to rank
		used to display the ranking by ASN
	<asn>|<timestamp>|<date>|<source> -> set of <ip>|<timestamp> 
		used to ensure the same IP is not already there 
		used to display the list of IPs in the interface


When it is finished, the integrity of the database in complete.

# Whois 

The whois part is desactivated by default. The idea is simple: an user ask for a whois entry in the web interface, the IP is put in the set 'whois' of db0, fetched and put in db2. 
From db2, it is copied and put in db5 as value of 
	<ip>|<timestamp>|whois


*** Database 6 ***

# Ranking

The ranking can only be computed when the routing db (3) in fully populated. When it is finished, a new index is created: 
	to_rank -> set of <asn>|<timestamp>|<date>|<source>

By using this index, we compute a rank for each ASN found today, by source. 
The ranking generate some entries : 
    <asn>|<date>|<source>|{rankv4,rankv6} -> sum of all the rank of 'their' <asn>|<timestamp>|<date>|<source>
        The entry is created only of the rank is > 0 
Each rank for each <asn>|<timestamp>|<date>|<source> is also saved but not used actually. It wll be usefull to generate a report for a ranking by subnet.

Only one 'version' of the rank is saved for a particular day. 

# Reports

To display the reports on the website, we will need one key for each source and a "global" key for the global report. They have this format: 
    <source>|{rankv4,rankv6} -> ordered set (on the rank, of course) of <asn>|<date>|<source>|{rankv4,rankv6}
    The list of sources is found by using <day>|sources
    The list of ASNs is found by using <date>|<source>|index_asns 

It is possible to change the day and get the report of an other one very easily :) 
