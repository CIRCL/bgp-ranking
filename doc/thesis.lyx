#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing onehalf
\use_hyperref true
\pdf_title "BGP AS / ISP Security Ranking"
\pdf_author "Raphaël Vinot"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref page
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 4cm
\topmargin 3cm
\rightmargin 2cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
BGP AS / ISP Security Ranking
\end_layout

\begin_layout Author
Raphaël Vinot
\end_layout

\begin_layout Date
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
today
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace 4cm
\end_inset


\end_layout

\begin_layout Abstract
For an Internet Service Provider, Autonomous system numbers (ASNs) are a
 logical representation of the other ISP peering or communicating with his
 autonomous system.
 ISP customers are using the capacity of the Internet Service Provider to
 reach Internet services over other AS.
 Some of those communications can be malicious (e.g.
 due to malware activities on an end-user equipments) and hosted at specific
 AS location.
 In order to provide an improved security view on those AS numbers, a trust
 ranking scheme will be implemented based on existing datasets of compromised
 systems, IPs of malware Command and Control servers and existing datasets
 of the ISPs.
\end_layout

\begin_layout Abstract
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Abstract
BGP ranking is a free software to calculate the security ranking of a specific
 AS number.
 The system is gathering external datasets (e.g.
 Dshield, Shadowserver, Arbor ATLAS) to calculate the ranking over the time.
 The purpose is to show the malicious activities of a specific AS and maybe
 limits its impact on other ASes.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FloatList figure

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand input
filename "company.lyx"

\end_inset


\end_layout

\begin_layout Part
Context, motivation and non-technical view
\end_layout

\begin_layout Section
Context
\end_layout

\begin_layout Subsection
Internet and the peering
\end_layout

\begin_layout Standard
Internet is a decentralized network with a bunch of operators, each operator
 has his proper network and they exchange traffic together.
 This exchange is called 
\emph on
peering
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "peering_transit"

\end_inset

.
 Without this exchanges, Internet can not work.
 
\end_layout

\begin_layout Standard
There is three different types of peering 
\begin_inset CommandInset citation
LatexCommand cite
key "art_peering"

\end_inset

:
\end_layout

\begin_layout Itemize
Transit: you pay a provider to provide you a transit across its network
\end_layout

\begin_layout Itemize
Peer: you exchange traffic with an other provider freely for 
\emph on
mutual benefit
\end_layout

\begin_layout Itemize
Customer: you sell an access across your network to your customers
\end_layout

\begin_layout Standard
The first of all 
\emph on
mutual benefits
\emph default
 between two peers will be the reduction of the costs of the exchanges.
 But it will also provide redundancy, improve the capacity of each network
 by increasing the number of possible routes and globally improve the performanc
es.
 
\end_layout

\begin_layout Standard
Two ISPs of the same size exchange traffic freely but when they need to
 exchange traffic with bigger providers (upstream providers), they will
 have to pay.
 When a smaller provider (downstream provider) want to peer with an ISP,
 he will pay too.
 
\end_layout

\begin_layout Subsubsection
Border Gateway Protocol (BGP)
\end_layout

\begin_layout Standard
The Border Gateway Protocol is the protocol 
\begin_inset CommandInset citation
LatexCommand cite
key "AS"

\end_inset

used by everyone on the Internet, without knowing it exists.
 This protocol is commonly presented as the routing protocol of the Internet,
 all the core routers of the Internet are using it to communicate together.
 
\end_layout

\begin_layout Standard
It is a path vector protocol: the routing table contains the destination
 network, the IP address of the next router on the way to this network and
 the path (in this case, the list of ASNs) to reach the destination.
\end_layout

\begin_layout Standard
In the practice, every router maintains a routing table to associate a network
 with the path of Autonomous system (AS) to this network, there is an example
 of entry 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "Example-of-BGP"

\end_inset

.
 
\end_layout

\begin_layout Standard
There is always more than one possible route to reach a particular network,
 the decision is made using the path but also the network policies.
 
\end_layout

\begin_layout Standard
On a security point of view, we can for example blackhole the traffic to
 a certain destination known as providing a Command & Control server and
 this way block the communication between this server and the clients, or
 to protect a subnet under DDoS attack coming from an other AS/subnet.
\begin_inset CommandInset citation
LatexCommand cite
key "BGP-policies"

\end_inset


\end_layout

\begin_layout Subsubsection
Autonomous system (AS)
\end_layout

\begin_layout Standard
The operators on the Internet exchange their routes, it is obvious that
 this operators need a way to identify each other without using IP Addresses.
 That is why there are Autonomous systems numbers (ASNs) 
\begin_inset CommandInset citation
LatexCommand cite
key "asns_Overview"

\end_inset

, an operator which wants to announce IP Addresses on the Internet needs
 at least one ASN, an AS will announce one or more networks.
\end_layout

\begin_layout Standard
The ASNs and subnets are assigned by the IANA to the Regional Internet Registrie
s (RIRs) which will sell it to its clients.
 The RIR responsible for the Europa region is RIPE-NCC.
\end_layout

\begin_layout Subsection
Resources
\end_layout

\begin_layout Subsubsection
Routing Information Service (RIS)
\end_layout

\begin_layout Standard
This service is described like this on the website
\begin_inset CommandInset citation
LatexCommand cite
key "RIS"

\end_inset

: 
\end_layout

\begin_layout Quote
RIS is a RIPE NCC project that collects and stores Internet routing data
 from several locations around the globe.
 RIS offers tools that bring this data to the Internet community.
\end_layout

\begin_layout Standard
The service provide a dump of the routing database directly extracted from
 their routers.
 This dump is exported each eight hours and contains around 350.000 different
 routes.
 An other very important point to keep in good memory is that the routes
 are volatile, each new version of the routing database has between 800
 and 1000 changes.
 A change is a new route: an ASN announce a new network or a dropped route:
 the network is not announced by this ASN anymore.
 Thanks to this dump, it is possible to compute the number of IP addresses
 assigned to each ASN.
\end_layout

\begin_layout Standard
If you want to see graphs and visualize the evolution of the routes by AS
 and by networks, you should visit the Routing Information Service website
 
\begin_inset CommandInset citation
LatexCommand cite
key "RIS"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
This service allow also to fetch in real time the ASN assignation of an
 IP address and usually to get a small textual description of this AS.
 An example 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "riswhois entry google"

\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Whois 
\begin_inset CommandInset label
LatexCommand label
name "sub:Whois"

\end_inset


\end_layout

\begin_layout Standard
The well-known whois protocol allows us to fetch information on the owners
 of IP addresses.
 Even if the malicious ISP controls some objects of the whois entries (e.g.
 route-object updated by a bot master), they can be considered as datasets
 because it will give us information on the bot master.
\end_layout

\begin_layout Standard
A whois entry contains much more information than a riswois entry but is
 not so often updated, about once a week.
 The most interesting information you can find in the whois entry is the
 name, the address and the phone number of the owner of the block of IPs.
 
\end_layout

\begin_layout Standard
We should speak of whois databases and not whois database because there
 are many servers providing different databases: each RIR maintain a whois
 database with the information he wants.
 
\end_layout

\begin_layout Standard
To get the most precise information on a particular IP Address, it is important
 to query the right server.
 The implementations of whois clients maintain an list of assignations to
 know for each IP what is the server to query.
 The implementation of Debian contains also the whois servers of some Local
 Internet Registries (LIRs), a subdivision of the RIRs.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Almost all the databases are incompatible with each other, the keys and
 the information are different.
\end_layout

\begin_layout Subsubsection
Datasets of suspicious activities
\end_layout

\begin_layout Standard
It is possible to find some datasets freely available on the Internet but
 a lot of them are not and that for different reasons:
\end_layout

\begin_layout Itemize
protection of the sources: each company has his proper way to gather information.
 If the attacker know this methods, he will attempt to be more stealthy
 and it will be more complicated for the company to find him again
\end_layout

\begin_layout Itemize
the company providing the dataset sells this information to the ISPs which
 have interest in it 
\end_layout

\begin_layout Standard
It exists a large variety of datasets including IP and/or prefixes for malicious
 activities.
 But their level of trust is variable, the methods used to generate the
 datasets can vary a lot from a source to another.
 To be exhaustive on this description of the datasets we have to say that
 many data sources gives only information on a particular ASN.
\end_layout

\begin_layout Paragraph
Arbor ATLAS/Active Threat Feed
\end_layout

\begin_layout Standard
The dataset provided by Arbor is not freely available and their quality
 is quite high because the reports are analyzed and classified.
 Arbor explains his work in an FAQ 
\begin_inset CommandInset citation
LatexCommand cite
key "Arbor-faq"

\end_inset

 and the gathering of the data is explained like this: 
\end_layout

\begin_layout Quote
Data is captured by using a distributed network of sensors running a number
 of data capture and analysis tools.
 These sensors can:
\end_layout

\begin_layout Quote
- Interact with attackers to discover what activity they are attempting
 
\end_layout

\begin_layout Quote
- Capture full payloads and classify them 
\end_layout

\begin_layout Quote
- Characterize scan traffic to know the reputation of the traffic he is
 routing and mitigate the malicious activities originating from their customers.
 
\end_layout

\begin_layout Standard
And this information are merged with logs, statistics and reports to have
 a complete view of the threads and reduce the false positives.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Atlas provide also some more information such as an URL to get more information,
 the coverage time and category of the attack.
\end_layout

\begin_layout Paragraph
Dshield
\end_layout

\begin_layout Standard
The lists of Dshield are public and they are generated using only the firewall
 logs of the users 
\begin_inset CommandInset citation
LatexCommand cite
key "Dshield-about"

\end_inset

, the precision and the quality is less good than for Arbor but there is
 however a small analyze because Dshield provide two lists.
\end_layout

\begin_layout Standard
The first one is a full dump of the today's information, no filtered at
 all, contains around one million entries and many false positives like
 private address.
 But this list stays interesting because of the big amount of IPs it contains
 and it is useful to correlate it with other sources.
 
\end_layout

\begin_layout Standard
The second contains only the "Top 100" of the daily dump and less false
 positive but should not be used as blocklist says Dshield.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Paragraph
abuse.ch ZeuS Tracker
\end_layout

\begin_layout Standard
This list is only concentrated on one unique thread: ZeuS.
 On the FAQ, ZeuS is described like this
\begin_inset CommandInset citation
LatexCommand cite
key "ZeuS-faq"

\end_inset

: 
\end_layout

\begin_layout Quotation
ZeuS (also known as Zbot / WSNPoem) is a crimeware kit, which steals credentials
 from various online services like social networks, online banking accounts,
 ftp accounts, email accounts and other (phishing).
 The web admin panel can be bought for 700$ (source: RSA Security 4/21/2008)
 and the exe builder for 4'000$ (source: Prevx 3/15/2009).
\end_layout

\begin_layout Standard
The detection of ZeuS Command&Control servers is done by traffic sniffing
 and study of the captured (in Honeypots) Zeus clients.
 This list contains all known ZeuS Command&Control servers and is expected
 to be used as a blocklist, it is highly reliable.
 
\end_layout

\begin_layout Paragraph
Shadowserver 
\end_layout

\begin_layout Standard
The mission of the Shadowserver Foundation is presented like this on the
 website
\begin_inset CommandInset citation
LatexCommand cite
key "Shadowserver-mission"

\end_inset

: 
\end_layout

\begin_layout Quote
The Shadowserver Foundation is an all volunteer watchdog group of security
 professionals that gather, track, and report on malware, botnet activity,
 and electronic fraud.
 It is the mission of the Shadowserver Foundation to improve the security
 of the Internet by raising awareness of the presence of compromised servers,
 malicious attackers, and the spread of malware.
 
\end_layout

\begin_layout Standard
They are working the same way as Arbor by providing reports on particular
 AS, only to the members but they does not have to pay for it.
\end_layout

\begin_layout Paragraph
Abusix 
\end_layout

\begin_layout Standard
It is completely different: Abusix does not provide list but permit to find
 easily the abuse address of a provider by the IP address of the attacker,
 will send a mail to this address and tell what the problem is and on what
 IP address.
 The data coming from Abusix are usually good but should be verified because
 it is always possible to report a false positive.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
This raw-datasets will be aggregated and analyzed to see their evolution
 in the time and generate statistics.
\end_layout

\begin_layout Subsection
Threats
\end_layout

\begin_layout Standard
Internet has always been an interesting place for the cybercriminals: virus
 and attack on Information Systems exists since the computers exist but
 now that almost everybody can have an Internet access (with a computer
 or a mobile device) it is a way more easy for the attackers to gain access
 to more computer: for a vast majority of the population IT security is
 absolutely not in their scope and they have no clue on it.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
In the past, the malwares were often used to beak a computer or make them
 crash.
 Not anymore: already in 2007, Kaspersky proclaim the 
\emph on
death of "non-profit" malicious software
\emph default

\begin_inset CommandInset citation
LatexCommand cite
key "non-profit-malware"

\end_inset

.
 Now this activity is a real business with organizations doing malwares,
 administrating Botnets for their own needs or renting a part of the botnet
 to clients 
\begin_inset CommandInset citation
LatexCommand cite
key "sell botnet"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
One of the most used way to commit illegal activities on the Internet these
 days are the Botnets.
 
\end_layout

\begin_layout Subsubsection
Botnet
\end_layout

\begin_layout Standard
A botnet is a network of devices (Bots) infected by a malware which are
 controlled by a Command & Control Server and administrated by a Botmaster.
 The Botmaster is often an organization which rent a certain amount of infected
 computers to performs suspicious activities.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename botnet.dia
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Botnet - Basics
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A botnet may be used to perform DDOS attack on servers, exchange data, provide
 phishing sites, send Spam, distribute Malwares and many other.
 
\end_layout

\begin_layout Standard
The big advantage for the cybercriminals is that they are (virtually) invisible
 because they never attack directly their targets and are never seen as
 attacker in the logfiles.
 An other advantage is that it costs almost nothing to them: they does not
 need to earn thousands of computers, they just need to develop a malware
 and let it working.
 
\end_layout

\begin_layout Subsubsection
Usage of the network
\end_layout

\begin_layout Standard
The Bot-master will communicate with his Bots to give orders, the bots will
 sometime communicate together (P2P based botnet
\begin_inset CommandInset citation
LatexCommand cite
key "p2p-botnet"

\end_inset

) and they will attack their targets in case of DDoS or attempt to make
 the victims coming on the servers in case of phishing.
\end_layout

\begin_layout Standard
As we can see, the communication is the key of a Botnet.
 We can easily understand that if we are able to stop the communication
 between the master and the bots, or know the members of the botnet and
 do not browse on websites hosted on them, the botnet will be armless.
 This techniques are called black-holing: all the data coming or to the
 designated hosts will be silently dropped.
 
\end_layout

\begin_layout Subsection
Monitoring the network
\end_layout

\begin_layout Standard
As we can see, there is a gap between the world where everybody will peer
 together without any control, just to make Internet faster and the real
 world where there is Botnets and companies selling those to perform DDoS,
 send Spams and provide phishing websites.
 We need a way to be able to know what is happening in his network and respond
 to the attacks.
 
\end_layout

\begin_layout Subsubsection
Confidence
\end_layout

\begin_layout Standard
An other point to keep in good memory is that the Internet is based on confidenc
e...
 but confidence without any control will not work: if an ISP decide that
 he does not care what is happening on his network he may be blacklisted
 by the other ISPs.
 Or at least his bandwidth will be reduced, even if the the suspicious traffic
 is originating from a third ISP.
 
\end_layout

\begin_layout Standard
This is why it is a necessity for each Internet operator to know what for
 traffic he is routing.
 This task is critical for every ISP and of course for the satellite operators
 too: they often provide an Internet access to their customers.
\end_layout

\begin_layout Subsubsection
Reputation and ranking system 
\end_layout

\begin_layout Standard
To know the reputation of the traffic he is routing and mitigate the malicious
 activities originating from their customers, an ISP can for example use
 a ranking system based on datasets of suspicious activities.
\end_layout

\begin_layout Standard
There are at least three goals which can be achieved by using a ranking
 system: 
\end_layout

\begin_layout Itemize
Disrupting the malware Command & Control communication: 
\end_layout

\begin_deeper
\begin_layout Itemize
drop all the traffic from and/or to an AS or a network (blackholing)
\begin_inset CommandInset citation
LatexCommand cite
key "blackhole-malware"

\end_inset


\end_layout

\begin_layout Itemize
modify the performance and/or the bandwidth of the traffic coming from and
 to the C&C server (traffic shaping)
\end_layout

\end_deeper
\begin_layout Itemize
Limiting the 
\emph on
effectiveness
\emph default
 of the Botnet, reduce the propagation of the malware by informing the other
 ISPs or the customers that a particular AS is a bad peer or that the websites
 hosted there should not be trusted
\end_layout

\begin_layout Itemize
Assessment between ISPs: the ranking can be influenced by other ISPs and
 it is possible to improve or limit the peering with an other ISP 
\end_layout

\begin_layout Standard
To monitor properly the network, we need to aggregate information coming
 from different sources and analyze it.
 
\end_layout

\begin_layout Subsection
Key points in the analysis 
\end_layout

\begin_layout Standard
The data are coming from different sources, it is important because this
 sources sources will cover different threads ant it will allow us to have
 a more global overview on the malicious ASNs.
\end_layout

\begin_layout Standard
To classify properly the information, the least common denominator, present
 in each datasets: CIDR block and / or ASN.
\end_layout

\begin_layout Subsubsection
Size and quality 
\end_layout

\begin_layout Standard
As we saw, we have some poor-quality sources but with a lot of entries they
 are very useful to see trends.
 The other, with an higher quality but less entries will be used to emphasize
 the trends of the first sources: they have already been analyzed and contains
 much less false positive.
 It is the first and most important point of the analysis: we have to be
 able to make the difference between the low-quality entries and the high-qualit
y one.
 
\end_layout

\begin_layout Description
Solution This differentiation will be done by using a weight on each entries:
 the best sources will have an high weight and the other a lower one.
 Like this, they will not be lost in the big amount of entries coming from
 the other, low-quality datasets.
 
\end_layout

\begin_layout Subsubsection
Format 
\end_layout

\begin_layout Standard
Every dataset has his proper format, they are obviously incompatible from
 one data sources to another: we will find plain text, CSV and XML files.
 Some files contains only the IP addresses, some other the type of the attack
 and a timestamp.
 Some files are updated every couple hours, most of them every 24 hours.
 But the insertion in the database has to be same for every source.
\end_layout

\begin_layout Description
Solution Every source will have his proper module, extracting the needed
 information of the files and return this information to a standard interface
 which will insert it in the database.
 This way, the overhead induced by the new datasets will be highly reduced.
 More in formations on this particular point 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:Modules"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Type of the information
\end_layout

\begin_layout Standard
Last but not least, some of the datasets contains only information on a
 particular AS.
 We already spoke of this datasets: they are usually provided by companies
 selling this in formations to ISPs.
 This datasets may badly influence the results by increasing the weight
 of a particular AS.
 
\end_layout

\begin_layout Description
Solution It is actually not fully implemented but the goal will be to offer
 to each ISP interested by this system to obtain an account on the website
 and manage this datasets on the way he wants: compare the datasets with
 the global data or have a view on the evolution of his ASN.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
After all this theoretical part, we will now give you a small overview of
 the system without too much details of the implementation.
 But it will allow you to have a better view of the basic principles, the
 architecture of the system and on the requirements imposed by the future
 usages.
\end_layout

\begin_layout Section
Implementation 
\end_layout

\begin_layout Standard
After this exhaustive presentation of the context, it is now time to give
 some information on the implementation and what are the requirements of
 the application.
 
\end_layout

\begin_layout Standard
The high-level diagram of the implementation is available 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:High-level"

\end_inset

.
\end_layout

\begin_layout Subsection
Highlights
\end_layout

\begin_layout Standard
There are two requirement on this project: the code has to be opensource
 and as fast as possible to allow to use the results on a corporate network.
\end_layout

\begin_layout Subsubsection
License
\end_layout

\begin_layout Standard
The whole project is opensource because its purpose is to allow every company
 interested by this project to use it.
 But we also want that if this companies use the code and make modifications,
 they participate to the project.
 
\end_layout

\begin_layout Standard
That's why we choose a GPL license and more precisely the version 3 of the
 Affero GPL.
 The advantage of this license (Affero) is that if someone want to use the
 system and only allow the users to use it over the network, he will have
 to release the code 
\begin_inset CommandInset citation
LatexCommand cite
key "mongodb-agpl"

\end_inset

.
 It is not the case for the standard version of the GPL but for this project,
 it is very important because the system will most of the time / always
 be accessed through the network.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Description
Note the code of the system is released opensource 
\begin_inset CommandInset citation
LatexCommand cite
key "BGP Ranking"

\end_inset

, not the datasets and the results, for the reasons exposed above.
 
\end_layout

\begin_layout Subsubsection
Usages and consequences
\end_layout

\begin_layout Standard
The code will be used to filter the network flow: 
\end_layout

\begin_layout Itemize

\emph on
divert filtering
\emph default
: the packets will be stopped, send to the userspace, analyzed, modified,
 whatever and may be pushed back into the IP stack 
\begin_inset CommandInset citation
LatexCommand cite
key "divert_filter"

\end_inset

 
\end_layout

\begin_layout Itemize

\emph on
blackhole filtering
\emph default
: the packet are silently dropped 
\end_layout

\begin_layout Standard
To achieve this goal it is possible to use flow spec
\begin_inset CommandInset citation
LatexCommand cite
key "Flowspec"

\end_inset

: it is a Quality of Service but for the BGP protocol.
 This RFC allows for example to increase or decrease the priority of the
 traffic originating from a particular Subnet or AS.
 
\end_layout

\begin_layout Standard
Flow spec can also be used to do ingress filtering on the border of the
 ISP infrastructure.
 If the source IP address of a flux is not in the range announced by the
 originating AS, the traffic will be discarded, even if this traffic comes
 from
\emph on
 behind an Internet Service Provider's (ISP) aggregation point
\emph default
 
\begin_inset CommandInset citation
LatexCommand cite
key "ingress_filter"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The first consequence is that the process of computing the ranking of an
 AS (and later of a subnet) has to be fast enough to allow the user to manipulat
e the traffic originating from a malicious source when it is detected in
 the datasets.
 The definition of 
\emph on
fast enough
\emph default
 depends on the the frequency of the update of the sources.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The solution we decide to use is to do a 
\emph on
mapreduce
\emph default
-like processing
\begin_inset CommandInset citation
LatexCommand cite
key "Mapreduce"

\end_inset

: it means to be able to run as often as possible more than one process
 on the same task.
 To do it, we will share the information between the processes using a key/value
 storage server called Redis 
\begin_inset CommandInset citation
LatexCommand cite
key "redis_official"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
High-level view
\end_layout

\begin_layout Standard
The ranking system can be reduced as two different parts: the aggregations
 of the data and the ranking himself.
 
\end_layout

\begin_layout Subsubsection
Aggregation
\end_layout

\begin_layout Standard
The first data inserted into the database will be the one from the datasets,
 typically the IP Addresses.
 At the same time, two other processes will find in the database all the
 new entries by looking for the one without RIS and Whois entries and fetch
 the most up-to-date available information from the Internet.
 
\end_layout

\begin_layout Standard
The most important information to fetch is the RIS Whois entry because it
 contains the ASN announcing the IP and the block of the IP.
 Both of this information are very important because even if the ranking
 is actually only based on the ASNs, it is planned to implement a ranking
 based on the subnets.
 
\end_layout

\begin_layout Description
Note it is possible to deactivate the fetching of the whois entries in the
 configuration: it is only useful to have complementary information on a
 particular IP address but this fetching takes quite a lot of time (see
 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:Whois-server"

\end_inset

 for more information) and use an huge amount of space in the database.
 
\end_layout

\begin_layout Standard
It is deactivated by default.
 
\end_layout

\begin_layout Subsubsection
Ranking
\end_layout

\begin_layout Standard
Based on the data in the database, we will be able to compute the ranking
 
\emph on
for one ASN
\emph default
 with the following formula: 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\size largest
\begin_inset Formula $R=1+\frac{\left(SUM\left(Occurrences*source\_impact\right)*SUM\left(Vote\right)\right)}{AS\_Size}$
\end_inset


\end_layout

\begin_layout Description
Occurrences all the IPs from the ASN, by sources.
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
Each Occurrence per source is unique even if we see multiple the same IP
 address for the same source.
\end_layout

\begin_layout Description
Source_impact
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none
 the value assigned to the source, it will depend of his quality
\end_layout

\begin_layout Description
Vote the vote against this AS given by an other user of the system (actually
 not implemented)
\end_layout

\begin_layout Description
AS_Size The number of IPs announced by the AS when the ranking is computed
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
We can see the same IP address among the different sources, the formula
 is not limiting that as this is usually a good sign of malicious activities:
 the information is validated by multiple sources.
\end_layout

\begin_layout Description
Note Only The ISPs allowed to access to the system will be able to vote
 against other ISPs.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
This index will be used by the ISP to know if his customers are suspicious
 or not and investigate if necessary
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
enlargethispage{1cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename basics/highlevel.dia
	lyxscale 50
	scale 40
	scaleBeforeRotation
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:High-level"

\end_inset

High level
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
BGP AS / ISP Security Ranking
\end_layout

\begin_layout Section
Data storage
\end_layout

\begin_layout Standard
We have two types of data to store in this project: 
\end_layout

\begin_layout Itemize
static information: they are written one time in the database and never
 updated/deleted anymore, only read.
 As the performances are not really important, we use a relational database.
\end_layout

\begin_layout Itemize
temporary, volatile information: they are written/updated/deleted very often
 and need a fast access.
 A key/value storing solution is a good choice.
 
\end_layout

\begin_layout Subsection
Relational database
\end_layout

\begin_layout Standard
The system officially supports MySQL as relational database but because
 we are using the python module 
\emph on
SQLAlchemy
\emph default
, all the databases supported by it may be used 
\begin_inset CommandInset citation
LatexCommand cite
key "SQLAlchemy-dbs"

\end_inset

.
 Be aware that depending on the database you will use, you might experience
 some (performance) problems, mostly if you decide to use SQLite.
 But PostgreSQL for example should work fine.
 
\end_layout

\begin_layout Standard
This database contains actually all the static information used by the ranking
 system.
 Static information means all the information extracted of the datasets
 and the whois entries, when they are in the database, they will never be
 modified anymore.
 The voting in formations are also saved into this database as well as the
 history of the ranking used to generate the graphs.
 
\end_layout

\begin_layout Standard
On top of 
\emph on
SQLAlchemy
\emph default
, the module 
\emph on
elixir
\emph default
 is used because it implements the active record pattern
\begin_inset CommandInset citation
LatexCommand cite
key "active-record"

\end_inset

: it allows the developer to see the entries of the database as objects
 and simplify a lot the usage of the databases.
 The most important point is that we will never use any SQL Queries.
 On a security point of view, it will reduce the risk of SQL injections.
 
\end_layout

\begin_layout Description
Note the users will never write anything in the database and have a read
 only access through the web interface: all the write process is done by
 the scripts we will explain in the next part of this document.
 
\end_layout

\begin_layout Subsection
Key/value store
\end_layout

\begin_layout Standard
The Key/value store used by the system is Redis.
 Depending on the part of the program, Redis is used differently:
\end_layout

\begin_layout Subsubsection
Shared memory
\end_layout

\begin_layout Standard
The whole program use a lot of processes and most of them need to exchange
 information.
 It would be possible to use shared memory between processes using the system
 API but it is a lot easier to put all the information in a shared database
 which will deal on its side with the problem of the simultaneous access
 to the resources.
 
\end_layout

\begin_layout Standard
The process which need this information will pick them, do his work and
 give the result to the next process through the same or an other database.
 
\end_layout

\begin_layout Subsubsection
Caching
\end_layout

\begin_layout Standard
It is common that an IP address is present more than one time in a dataset,
 or the same IP in different datasets.
 It is important to know that the whois entries have a life time of at least
 24 hours: they are not updated that often on the whois servers.
 This is why a caching system is very useful to improve the performance
 of the software: it is absolutely unnecessary to fetch more than one time
 a particular whois entry for at least 24 hours.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Redis implements a time to live command, we just have to give a TTL of 24
 Hours to each cached entry and it will be automatically deleted after that
 amount of time.
 
\end_layout

\begin_layout Subsubsection
Fast access
\end_layout

\begin_layout Standard
The other usage of Redis is quite obvious: we need to be able to do a lot
 of queries in a small period of time.
 It is the case for the the whois database for example: the most we do queries
 per second, the fastest we update the ranking database.
 
\end_layout

\begin_layout Standard
Redis provide a command called 
\emph on
redis-benchmark
\emph default
, it gives the following results with the code present on the master branch
 of today (27.08.2010) on our test server: 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\size small
$ ./redis-benchmark -q 
\end_layout

\begin_layout LyX-Code

\size small
PING: 45477.27 requests per second
\end_layout

\begin_layout LyX-Code

\size small
PING (multi bulk): 50545.45 requests per second
\end_layout

\begin_layout LyX-Code

\size small
SET: 53475.94 requests per second
\end_layout

\begin_layout LyX-Code

\size small
GET: 52408.38 requests per second
\end_layout

\begin_layout LyX-Code

\size small
INCR: 51287.18 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LPUSH: 53545.45 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LPOP: 52392.67 requests per second
\end_layout

\begin_layout LyX-Code

\size small
SADD: 52652.63 requests per second
\end_layout

\begin_layout LyX-Code

\size small
SPOP: 51020.41 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LPUSH (again, in order to bench LRANGE): 53223.40 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LRANGE (first 100 elements): 4835.59 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LRANGE (first 300 elements): 1786.67 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LRANGE (first 450 elements): 1249.69 requests per second
\end_layout

\begin_layout LyX-Code

\size small
LRANGE (first 600 elements): 932.05 requests per second
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The test server is a Intel(R) Xeon(R) (Quad Core) with 2.66GHz per core,
 8Gb RAM and running Ubuntu 10.4.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Redis define several types of values 
\begin_inset CommandInset citation
LatexCommand cite
key "Redis-types"

\end_inset

 the following types are used in the software: 
\end_layout

\begin_layout Description
String it is the simplest type: we just put into the database a key and
 a value.
 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\size small
$ ./redis-cli set mykey "my binary safe value"
\end_layout

\begin_layout LyX-Code

\size small
OK
\end_layout

\begin_layout LyX-Code

\size small
$ ./redis-cli get mykey
\end_layout

\begin_layout LyX-Code

\size small
my binary safe value
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Description
Set it is a list of elements but each element is unique
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code

\size small
$ ./redis-cli sadd myset 1
\end_layout

\begin_layout LyX-Code

\size small
(integer) 1
\end_layout

\begin_layout LyX-Code

\size small
$ ./redis-cli sadd myset 2
\end_layout

\begin_layout LyX-Code

\size small
(integer) 1
\end_layout

\begin_layout LyX-Code

\size small
$ ./redis-cli sadd myset 3
\end_layout

\begin_layout LyX-Code

\size small
(integer) 1
\end_layout

\begin_layout LyX-Code

\size small
$ ./redis-cli smembers myset
\end_layout

\begin_layout LyX-Code

\size small
1.
 3
\end_layout

\begin_layout LyX-Code

\size small
2.
 1
\end_layout

\begin_layout LyX-Code

\size small
3.
 2
\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementation, Technical overview
\end_layout

\begin_layout Standard
You can find directly the global diagram representing the part of the system
 gathering the data 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Technical-global-view"

\end_inset

.
 And 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "fig:Technical-global-view-Ranking"

\end_inset

 for the ranking.
 
\end_layout

\begin_layout Subsection
MySQL databases
\end_layout

\begin_layout Standard
Two databases are in use: the first one contains only the data of the datasets.
 The second one, the results of the ranking and the voting information.
 
\end_layout

\begin_layout Subsubsection
Data from the datasets
\end_layout

\begin_layout Standard
The database contains the the following tables: 
\end_layout

\begin_layout Description
IPs contains only the IPs extracted of the datasets.
 For each entry, the IP is the primary key.
\end_layout

\begin_deeper
\begin_layout Standard
This table allows us to dump easily all the IPs we found in the datasets.
\end_layout

\end_deeper
\begin_layout Description
IPsDescriptions for each IP found in the datasets, we create a new entry
 in this table.
 
\end_layout

\begin_deeper
\begin_layout Standard
The following information are extracted of the dataset, if they exists:
 
\end_layout

\begin_layout Itemize
The name of the class where the IP is coming from.
 This name has to be different for each class: it will be used for the ranking
\end_layout

\begin_layout Itemize
The timestamp of the insertion into the database: it is most of the time
 the current day but it can also be used to re-import old datasets, this
 functionality is actually not implemented.
 See 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Handling-old-datasets"

\end_inset

 for more information
\end_layout

\begin_layout Itemize
The date of generation of the list: it is the date given by the file or
 set to the current day if we don't have this information in the dataset
\end_layout

\begin_layout Itemize
The number of times the same IP is found in the same dataset
\end_layout

\begin_deeper
\begin_layout Description
Note if there is in the dataset a timestamp for each entry, we will create
 a new description each time, even if the same IP is present more than once.
\end_layout

\end_deeper
\begin_layout Itemize
The type of the infection
\end_layout

\begin_layout Itemize
Other raw information given by the dataset
\end_layout

\begin_layout Standard
The following information are set in the next part of the processing: 
\end_layout

\begin_layout Itemize
The whois entry
\end_layout

\begin_layout Itemize
The source of the whois entry
\end_layout

\begin_layout Itemize
Information on the ASN announcing the IP
\end_layout

\end_deeper
\begin_layout Description
ASNs is the same as the IPs table: it contains only the ASNs and for each
 entry, the ASN is the primary key.
\end_layout

\begin_deeper
\begin_layout Standard
This table allow us to dump easily all the ASNs of all the IPs we found
 in the datasets.
\end_layout

\end_deeper
\begin_layout Description
ASNsDescriptions a new entry is created if there is any new information
 or if an information is updated.
 
\end_layout

\begin_deeper
\begin_layout Standard
The following information is extracted of the RIS whois entries: 
\end_layout

\begin_layout Itemize
The owner announcing the IP-block containing the IP 
\end_layout

\begin_layout Itemize
The IP block 
\end_layout

\begin_layout Itemize
The source of the RIS whois entry
\end_layout

\begin_deeper
\begin_layout Description
Note It will always be riswhois.ripe.net but in the future, we may decide
 to use a BGP session directly on a router.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Ranking and Voting 
\end_layout

\begin_layout Standard
The two tables used to display the graphs are the following: 
\end_layout

\begin_layout Description
Sources contains only the names of the sources we can find in the database.
 For each entry, the source name is the primary key.
\end_layout

\begin_deeper
\begin_layout Standard
It is used to display the results by source.
\end_layout

\end_deeper
\begin_layout Description
History contains the information needed to display the graphs and the one
 used to compute a report
\end_layout

\begin_deeper
\begin_layout Itemize
the ASN of this rank
\end_layout

\begin_layout Itemize
the timestamp of the entry, set to the creation time
\end_layout

\begin_layout Itemize
the rank in IPv4 and IPv6
\end_layout

\begin_deeper
\begin_layout Description
Note this rank is unbalanced: it allows us to modify the weight of each
 source
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
There is also two other tables, user and votes.
 They are actually not used but will allow us in a near future to implement
 the voting functionality, for the authorized users.
 
\end_layout

\begin_layout Description
Users user database, used for the login.
 Contains only a user name and a password.
 
\end_layout

\begin_layout Description
Votes Save the history of the votes, contains the ASN and the value of the
 vote.
 It will also be possible to put a commentary.
 
\end_layout

\begin_layout Subsection
Data Aggregation 
\end_layout

\begin_layout Subsubsection
Fetching the datasets
\begin_inset CommandInset label
LatexCommand label
name "sub:Fetching-the-datasets"

\end_inset


\end_layout

\begin_layout Standard
It is not the case for all of them but all the datasets freely available
 on the Internet are automatically downloaded.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
improvement: the other too...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the download is finished, the process check if the file is new.
 Only if the file is new, it will be moved in the directory checked by the
 parsing process of this particular source.
\end_layout

\begin_layout Description
Note there is one process for each source.
\end_layout

\begin_layout Subsubsection
Parsing the datasets
\begin_inset CommandInset label
LatexCommand label
name "sub:Parsing-the-datasets"

\end_inset


\end_layout

\begin_layout Standard
As we know, the new files are copied in a special directory, for each source.
 The parser check periodically this directory and if there is a new file,
 it is parsed.
 
\end_layout

\begin_layout Standard
The parser will extract all the information of the datasets and put them
 into the database.
 
\end_layout

\begin_layout Description
Note as for the fetching, there is one process for each source.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
A description of all the actual modules is available
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Existing-modules"

\end_inset

.
 If you want to learn how to write a new module, please read
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Write-a-new"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
When the parsing is finished, the system will automatically fetch the rest
 of the information it needs and there is neither further module to write
 nor any other action to proceed: the raw information is processed and computed
 automatically to generate the ranking and build the reports.
 
\end_layout

\begin_layout Subsubsection
Getting the (RIS) Whois entries
\begin_inset CommandInset label
LatexCommand label
name "sub:Getting RIS Whois"

\end_inset


\end_layout

\begin_layout Standard
There are two processes: the first one for the RIS Whois entries and the
 second for the whois entries.
 
\end_layout

\begin_layout Standard
They are working like this: 
\end_layout

\begin_layout Enumerate
Ask the redis database if there is an entry for the current IP
\end_layout

\begin_layout Enumerate
If not, put the IP in the set of pending queries (there are two sets, the
 first one is called 
\emph on
ris
\emph default
 and the second 
\emph on
whois
\emph default
)
\end_layout

\begin_layout Enumerate
Ask periodically if there is an entry for this IP 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ris_whois_process.dia
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
(RIS) Whois process
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This process does not do any network connexions with any other computer
 (if redis is running on localhost).
 
\end_layout

\begin_layout Description
Note it is also multiprocessed: each process getting (RIS) Whois entries
 will receive a certain interval of IPsDescriptions.
 This interval is based on the number of allowed processes (in the default
 configuration: 4) and the number of RIS entries to fetch.
 
\end_layout

\begin_deeper
\begin_layout Standard
There is also a limit on the size of the interval: this way it is possible
 to reduce the RAM usage without influencing the speed.
 
\end_layout

\end_deeper
\begin_layout Subsubsection
Fetching the (RIS) Whois entries
\begin_inset CommandInset label
LatexCommand label
name "sub:Fetching-ris-whois"

\end_inset


\end_layout

\begin_layout Standard
There are one or more processes fetching the (RIS) Whois entries for each
 available Whois server (in the default configuration: 4 by server).
 The sets of pending queries are identified by the name of the server to
 query.
\end_layout

\begin_layout Standard
They are working like this: 
\end_layout

\begin_layout Enumerate
Get a pending query from the redis database
\end_layout

\begin_layout Enumerate
Fetch the entry from the server
\end_layout

\begin_layout Enumerate
Set the entry in the database with the query as key and the entry as value
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ris_whois_fetch.dia
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
(RIS) Whois fetching process
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is not always possible but we always attempt to use the keepalive capabilitie
s of the servers: it is almost five time faster to stay connected than to
 reconnect between each query.
 Actually, only the servers of the RIPE are supporting this option.
 Of course, the local whois server does too.
 
\end_layout

\begin_layout Description
Note the network is sometime unstable or the remote servers may have connectivit
y problems.
 This is why we catch all the network error and attempt to do the same query
 later.
\end_layout

\begin_layout Subsubsection
Sorting the whois entry
\begin_inset CommandInset label
LatexCommand label
name "sub:Sorting whois"

\end_inset


\end_layout

\begin_layout Standard
As we already saw, all the whois entries are not on the same server and
 to be able to fetch the right whois entries of an IP, we need to find the
 server to query.
 This task will be performed by an other process: 
\end_layout

\begin_layout Enumerate
Get a pending query from the redis database
\end_layout

\begin_layout Enumerate
Find the assignation by using the algorithm described 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:IPs-Keys-generator"

\end_inset


\end_layout

\begin_layout Enumerate
Set the entry in the database with the server name as key and the query
 as value
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename whois_sort.dia
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Whois sorting process
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
Note it does not concern the RIS Whois entries: RIPE NCC provide a global
 RIS Whois server which is able to answer to every query.
 
\end_layout

\begin_layout Description
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Tow UML diagrams representing the process of getting from redis, fetching
 and sorting the whois query for the RIS Whois (on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:Get-RIS-Whois"

\end_inset

) and Whois (on page 
\begin_inset CommandInset ref
LatexCommand pageref
reference "fig:Get-Whois-entries"

\end_inset

) entries are available in the annexes.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Ranking
\end_layout

\begin_layout Standard
Based on the information extracted from the datasets and the ones fetched
 from the Internet, we are able to compute a ranking.
 
\end_layout

\begin_layout Subsubsection
Routing information
\end_layout

\begin_layout Standard
The routing information are extracted from the dump of the BGP table of
 RIPE NCC.
 We are using the routing table collected by the Remote Route Collectors
 (RCC) called rrc00, it is the biggest one and he 
\begin_inset Quotes eld
\end_inset

knows
\begin_inset Quotes erd
\end_inset

 all the routes of the Internet.
 It allows us to build a database with all the ASNs and the networks they
 announce.
\end_layout

\begin_layout Standard
The raw data are saved in in MRT format 
\begin_inset CommandInset citation
LatexCommand cite
key "MRT-RFC"

\end_inset

 and we need to use the libbgpdump library 
\begin_inset CommandInset citation
LatexCommand cite
key "libbgpdump"

\end_inset

 to convert the raw data to a readable format and be able populate the database.
\end_layout

\begin_layout Standard
The processing of the file is also multiprocessed, the converted file is
 splitted and one process populating the database if launched on each file
 (by default, 4 at the same time).
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
When populated, the database is used to compute the number of IPs announced
 by the ASNs: it is an very important information because the rank of the
 ASNs is based on it.
 A small subnet with a certain amount of suspicious IPs will have an higher
 rank than a big subnet with the same amount of suspicious IPs.
 
\end_layout

\begin_layout Subsubsection
Computing
\end_layout

\begin_layout Standard
The routing database has to be fully populated before computing the ranking.
 Elsewhere, we can not be sure that the number of IPs announced for an ASN
 is right.
 The easiest way is to sequentially populate the routing database and after
 that compute the ranking.
 There is a new dump every eight hours, it is enough if the ranking is computed
 every eight hours too.
 
\end_layout

\begin_layout Standard
For each ASN found in the database, the following actions are achieved:
 
\end_layout

\begin_layout Enumerate
Counting the number of IP announced by the ASN 
\end_layout

\begin_layout Enumerate
Counting the number of IPs, by sources, present in the database for the
 current day 
\end_layout

\begin_layout Enumerate
For each source, dividing the number of IP in the database by the total
 number of IP announced
\end_layout

\begin_layout Enumerate
Saving in the database
\end_layout

\begin_layout Description
Note as usual, it is multiprocessed: each process compute the ranking of
 a certain interval of ASNs (by default, 4 processes at the same time).
\end_layout

\begin_layout Standard
Like for importing old datasets, it is possible to compute the ranking for
 old entries but we will also have the same problems.
 See 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Handling-old-datasets"

\end_inset

 for more information.
\end_layout

\begin_layout Section
Libraries
\end_layout

\begin_layout Subsection
IPs Keys generator 
\begin_inset CommandInset label
LatexCommand label
name "sub:IPs-Keys-generator"

\end_inset


\end_layout

\begin_layout Subsubsection
Context
\end_layout

\begin_layout Standard
We have on one side a list of IP sets, each of them is connected to a particular
 information and on the other side IP addresses.
 
\end_layout

\begin_layout Standard
This library aims to provide a fast method to get the better information
 corresponding to this IP addresses.
 To find this information, we have to find the smallest subnet where the
 IP is.
\end_layout

\begin_layout Paragraph
Usage
\end_layout

\begin_layout Standard
The library need to know if we are working with IPv4 or IPv6 and the first
 and the last IP of the interval to compute.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
The list of sets and corresponding information: 
\end_layout

\begin_layout Itemize

\family typewriter
1.0.0.0 - 1.255.255.255 : Big provider
\end_layout

\begin_layout Itemize

\family typewriter
1.1.1.0 - 1.1.1.255 : Small provider
\end_layout

\begin_layout Itemize

\family typewriter
1.1.1.1 - 1.1.1.5 : Company selling websites
\end_layout

\begin_layout Standard
IP address : 
\family typewriter
1.1.1.3
\end_layout

\begin_layout Standard
This IP address is in all the sets but the most accurate information is
 that it is owned by the company selling websites.
\end_layout

\begin_layout Subsubsection
Algorithm
\end_layout

\begin_layout Paragraph
First idea 
\end_layout

\begin_layout Standard
Push all the IPv4 and IPv6 in the database.
\end_layout

\begin_layout Subparagraph
Pros
\end_layout

\begin_layout Itemize
Easy 
\end_layout

\begin_layout Itemize
Fast: access to the information in O(1)
\end_layout

\begin_layout Subparagraph
Cons
\end_layout

\begin_layout Itemize
there is about 
\begin_inset Formula $4,3\cdot10^{9}$
\end_inset

 IPv4 and about 
\begin_inset Formula $3,4·10^{38}$
\end_inset

 IPv6, it is impossible to push in the database all the IPv4 (and obviously
 all the IPv6)
\end_layout

\begin_layout Paragraph
Second idea
\end_layout

\begin_layout Standard
To reduce drastically the number of keys, the easiest solution is to push
 in the database the first and the last element of the interval.
\end_layout

\begin_layout Subparagraph
Pros
\end_layout

\begin_layout Itemize
Easy
\end_layout

\begin_layout Itemize
Few keys
\end_layout

\begin_layout Subparagraph
Cons
\end_layout

\begin_layout Itemize
Huge amount of queries to redis: we have to find the best interval and it
 can take some time: in the worst case, it will be O(n) with n the number
 of IPs in the interval.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ipkeys1.dia
	lyxscale 50
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
IPs Keys generator 1
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
We have to do a query for each IP until we find the interval containing
 ours.
 Even if we are able to jump the intermediate networks, it will take too
 much time.
\end_layout

\begin_layout Standard
For a network like 1.0.0.0/8 with more than 
\begin_inset Formula $16\text{·}10^{6}$
\end_inset

 IPs, it takes more than 15s.
\end_layout

\begin_layout Paragraph
Third Idea 
\end_layout

\begin_layout Standard
The keys saved in redis are strings, the easiest way is to find an algorithm
 based on the string representation of an IP address.
 
\end_layout

\begin_layout Standard
For the first and the last IP of an interval, we split the address with
 the .
 (IPv4) or the : (IPv6), find the equal part and push it into the database.
 Equals part means the identical string in the two IPs, from left to right,
 and stop on the first different character.
\end_layout

\begin_layout Standard
The value of this key will be the following: 
\emph on
<integer representation of the first IP of the interval>_<integer representation
 of the last IP of the interval>
\emph default
 and be used to ensure that the IP of the query is really in this interval.
 
\end_layout

\begin_layout Example
Generate a key for a simple interval 
\end_layout

\begin_layout Example
Interval: 1.1.1.0 - 1.1.1.255
\end_layout

\begin_layout Example
Equal Part: 1.1.1
\end_layout

\begin_layout Example
Value: 16843008_16843263
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Example
Generate a key for a more complex interval 
\end_layout

\begin_layout Example
Interval: 1.1.1.0 - 1.1.5.255
\end_layout

\begin_layout Example
Equal Part: 1.1
\end_layout

\begin_layout Example
But be want more precision, the key will be the following: 1.1.{1-5} => 5
 keys
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Example
Generate a key for a very complex interval
\end_layout

\begin_layout Example
Interval: 1.2.3.0 - 1.4.5.255
\end_layout

\begin_layout Example
Equal Part: 1
\end_layout

\begin_layout Example
The keys will be the following: 1.2.{3-255}, 1.3, 1.4.{0-5} => 252+1+6 = 259
 keys 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Subparagraph
IPv6
\end_layout

\begin_layout Standard
the idea is the same but the intervals are usually big and there is never
 such intervals as in the third example, we always push intervals like in
 the first and second example, usually only like the second.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
To get the smallest interval, we will split the IP address in the same way
 and begin to get the longest possible key.
 
\end_layout

\begin_layout Example
For the IP 
\family typewriter
1.1.1.1
\family default
, we will begin with 
\family typewriter
1.1.1
\family default
 then 
\family typewriter
1.1
\family default
 and finally 
\family typewriter
1
\family default
.
\end_layout

\begin_layout Standard
The second problem is that we will have sometime more than one value at
 a key: in IPv4, a lot of intervals are smaller than a /24.
 It is actually not a problem in IPv6 because even though the subnets are
 very big, they not shared between operators.
 But sooner or later it will used too.
 
\end_layout

\begin_layout Standard
This is why we want to be able to find the smallest network within a set
 of intervals.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
To do it, we just have to split the the interval keys found for a IP, check
 if it is in this interval.
 When one if found, we have to verify that there is no other smallest network
 containing the IP.
\end_layout

\begin_layout Example
Looking for the smallest network
\end_layout

\begin_layout Example
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Example
IP: 1.1.1.2
\end_layout

\begin_layout Example
Network 1: 1.1.1.0 - 1.1.1.255
\end_layout

\begin_layout Example
Network 2: 1.1.1.1 - 1.1.1.5
\end_layout

\begin_layout Example
The equal part of the two networks and of the IP is 
\emph on
1.1.1
\emph default
.
 In Redis, the key 
\emph on
1.1.1
\emph default
 contains the decimal representation of the two networks.
 
\end_layout

\begin_layout Example
The two networks will be checked: 
\end_layout

\begin_deeper
\begin_layout Enumerate
the IP is in Network 1
\end_layout

\begin_layout Enumerate
the IP is in Network 2 and Network 2 is contained in Network 1
\end_layout

\begin_deeper
\begin_layout Standard
The best network for 1.1.1.2 is Network 2.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Subparagraph
Pros
\end_layout

\begin_layout Itemize
Fast: the key will be find in O(3) for IPv4 and O(7) for IPv6.
 After that, we have to find the right interval in the set but it is just
 a comparison of a small number of values and goes very fast.
 
\end_layout

\begin_layout Itemize
Few keys
\end_layout

\begin_layout Subparagraph
Cons
\end_layout

\begin_layout Itemize
More complicated 
\end_layout

\begin_layout Subsection
File splitting
\begin_inset CommandInset label
LatexCommand label
name "sub:File-splitting"

\end_inset


\end_layout

\begin_layout Subsubsection
Context
\end_layout

\begin_layout Standard
One of the requirements is that the system has to to allow mapreduce-like
 processing.
 The problem with files is that it is not possible to parse it with more
 than one process at the same time.
 It would be great to be able to split a big file into smaller one and launch
 different processes on this files.
 This is the aim of this library.
 It has also to be included in an existing code and should be as transparent
 as possible.
 
\end_layout

\begin_layout Paragraph
Usage 
\end_layout

\begin_layout Standard
The library needs only a file to split, the number of files to generate
 and the separator.
 
\end_layout

\begin_layout Subsubsection
Example
\end_layout

\begin_layout Standard
The following lines are extracted of the dump of the BGP Routing table,
 the whole file is around 1Gb.
 It is very important to split it, at the right place.
 The right place will be the empty line between the two announce.
 
\end_layout

\begin_layout LyX-Code
TIME: 08/19/10 08:00:00
\end_layout

\begin_layout LyX-Code
TYPE: TABLE_DUMP_V2/IPV4_UNICAST
\end_layout

\begin_layout LyX-Code
PREFIX: 1.9.0.0/16
\end_layout

\begin_layout LyX-Code
SEQUENCE: 0
\end_layout

\begin_layout LyX-Code
FROM: 193.136.5.1 AS1930
\end_layout

\begin_layout LyX-Code
ORIGINATED: 08/18/10 13:33:40
\end_layout

\begin_layout LyX-Code
ORIGIN: IGP
\end_layout

\begin_layout LyX-Code
ASPATH: 1930 20965 3549 4788
\end_layout

\begin_layout LyX-Code
NEXT_HOP: 193.136.5.1
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
TIME: 08/19/10 08:00:00
\end_layout

\begin_layout LyX-Code
TYPE: TABLE_DUMP_V2/IPV4_UNICAST
\end_layout

\begin_layout LyX-Code
PREFIX: 1.9.0.0/16
\end_layout

\begin_layout LyX-Code
SEQUENCE: 0
\end_layout

\begin_layout LyX-Code
FROM: 193.0.0.56 AS3333
\end_layout

\begin_layout LyX-Code
ORIGINATED: 08/19/10 06:44:26
\end_layout

\begin_layout LyX-Code
ORIGIN: IGP
\end_layout

\begin_layout LyX-Code
ASPATH: 3333 1273 4788
\end_layout

\begin_layout LyX-Code
NEXT_HOP: 193.0.0.56
\end_layout

\begin_layout LyX-Code
COMMUNITY: 1273:12250 4788:200 4788:210
\end_layout

\begin_layout Subsubsection
Algorithm 
\end_layout

\begin_layout Description
Separator The separator is used to split the file at a particular point:
 there is usually blocks in the files we want to split and we cannot cut
 the files within this blocks.
 usually it is a 
\family typewriter

\backslash
n.
\end_layout

\begin_layout Description
Splitting First, we get the size of the file and divide it by the number
 of files we want.
 
\end_layout

\begin_deeper
\begin_layout Standard
To split we just 
\begin_inset Quotes eld
\end_inset

jump
\begin_inset Quotes erd
\end_inset

 of the size we compute and look for the next separator.
 The data in the interval is finally copied in a new file.
\end_layout

\begin_layout Standard
When the end of the file is reached, we return the list of generated files.
 The original file is not removed.
 
\end_layout

\end_deeper
\begin_layout Subsection
Whois Client
\end_layout

\begin_layout Subsubsection
Context
\end_layout

\begin_layout Standard
As we already explained 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Whois"

\end_inset

, there is not only one whois server but many.
 The whois client has to be able to ask the right server.
\end_layout

\begin_layout Subsubsection
Initialization 
\end_layout

\begin_layout Standard
The whois client is based on the assignations given by the whois package
 of Debian/Ubuntu.
 
\end_layout

\begin_layout Standard
The ranges are pushed into the database using the library described 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:IPs-Keys-generator"

\end_inset

.
 Each resulting key is associated to its whois server: 
\family typewriter
<IP_key>|<whois_server_URL>
\end_layout

\begin_layout Standard
Each server may have some special options:
\end_layout

\begin_layout Itemize
port: port to connect to on the server 
\end_layout

\begin_layout Itemize
pre: string prepended to the query 
\end_layout

\begin_layout Itemize
post: string appended to the query 
\end_layout

\begin_layout Itemize
keepalive: other prefix, makes the query keepalive (the server doesn't close
 the connexion after each query)
\end_layout

\begin_layout Standard
This options looks like this in the database: 
\family typewriter
<whois_server_url>:<option_name>|<option>
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The options are set depending on the server: on some servers, it is possible
 to reduce the response to the most precise information, and reduce the
 size of the entry in the database.
 An other very interesting option is to fetch only the entry in English
 (useful on some Asiatic servers).
 
\end_layout

\begin_layout Standard
This options have to be tested on each server.
 The default configuration is the best choice.
 
\end_layout

\begin_layout Subsubsection
Usage
\end_layout

\begin_layout Standard
The client is used by the fetching process, described 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Fetching-ris-whois"

\end_inset

.
\end_layout

\begin_layout Paragraph
Finding the best range
\end_layout

\begin_layout Standard
The best range is found using the library described a
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:IPs-Keys-generator"

\end_inset

.
\end_layout

\begin_layout Paragraph
Fetching
\end_layout

\begin_layout Standard
When the best range is found, the fetcher initialize the connection to the
 server using the information put in the database during the initialization
 and fetch the entry.
 If possible, the connection is not closed but very few servers authorize
 it, it slows a lot the process.
 That is why we have also a proper whois server, described 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:Whois-server"

\end_inset

.
\end_layout

\begin_layout Subsection
Whois Parser
\begin_inset CommandInset label
LatexCommand label
name "sub:Whois-Parser"

\end_inset


\end_layout

\begin_layout Standard
The basic idea of the parser comes from the project pywhois 
\begin_inset CommandInset citation
LatexCommand cite
key "pywhois"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Context
\end_layout

\begin_layout Standard
Every Whois server has his proper format for the response.
 It would be interesting to implement a simple way to handle every response
 and be able to parse it automatically to get only the information we want.
 
\end_layout

\begin_layout Subsubsection
Implementation 
\end_layout

\begin_layout Standard
It is possible in python to create new arguments 
\begin_inset Quotes eld
\end_inset

on the fly
\begin_inset Quotes erd
\end_inset

 by overloading the __getattr__ function.
 The idea is quite simple: if the argument does not exist in the class (standard
 python functions), we attempt to get it from an other way.
 
\end_layout

\begin_layout Standard
In our case, we will use a dictionary: each entry in the dictionary will
 have as key the name of the argument to get and as value a regexp that
 will be used to extract the information we want.
 For every server we want to handle, we need to write a python dictionary.
 
\end_layout

\begin_layout Paragraph
Dictionary
\end_layout

\begin_layout LyX-Code
RIS = {
\end_layout

\begin_layout LyX-Code
'route'      : 'route[6]?:[ ]*([^
\backslash
n]*)',
\end_layout

\begin_layout LyX-Code
'origin'     : 'origin:[ ]*AS([^
\backslash
n]*)',
\end_layout

\begin_layout LyX-Code
'description': 'descr:[ ]*([^
\backslash
n]*)'
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
By using this dictionary, when a RIS Whois entry is passed to the class,
 we just have to do whois.route to get the route.
 
\end_layout

\begin_layout Standard
The class is initialized with the URL to the server which did the query.
 This way, it is possible to select the right dictionary.
 
\end_layout

\begin_layout Section
Modules 
\begin_inset CommandInset label
LatexCommand label
name "sec:Modules"

\end_inset


\end_layout

\begin_layout Paragraph
Important Note 
\end_layout

\begin_layout Standard
the format of the modules described there is almost deprecated: will change
 in the next weeks, see 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Importing-datasets"

\end_inset

.
\end_layout

\begin_layout Subsection
Abstract part
\end_layout

\begin_layout Standard
Every module is a subclass of IPUpdate.
 This class is responsible for the insertion of the data extracted from
 the datasets into the MySQL database.
 The module will only define the functions used to extract the information
 of the dataset.
 
\end_layout

\begin_layout Subsection
Existing modules 
\begin_inset CommandInset label
LatexCommand label
name "sub:Existing-modules"

\end_inset


\end_layout

\begin_layout Subsubsection
Format
\end_layout

\begin_layout Paragraph
Plain text
\end_layout

\begin_layout Standard
The easiest format, the datasets of Dshield, abuse.ch and Abusix are provided
 in plain text.
 
\end_layout

\begin_layout Paragraph
XML/RSS
\end_layout

\begin_layout Standard
Arbor provide its list in a RSS file.
 
\end_layout

\begin_layout Paragraph
CSV
\end_layout

\begin_layout Standard
The lists of Shadowserver are in CSV.
 It is good to know that the order of the fields in the three lists is different...
 That is why there is three modules.
 
\end_layout

\begin_layout Subsubsection
Types
\end_layout

\begin_layout Paragraph
Type 1
\end_layout

\begin_layout Standard
the dataset contains only IP addresses and a date for the whole file (or
 at least, the module set a date).
\end_layout

\begin_layout Paragraph
Type 2 
\end_layout

\begin_layout Standard
the dataset contains more information like the type of the infection, a
 date for each entry and maybe more.
 All of this will be saved.
\end_layout

\begin_layout Subsection
Write a new module
\begin_inset CommandInset label
LatexCommand label
name "sub:Write-a-new"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
A module is a class, the name of each class hast to bee unique: is allows
 us to know the origin of all the entries in the database.
 The modules have also to define an home directory for their datasets.
 
\end_layout

\begin_layout Standard
That is all for the standard part, there are actually two types of modules
 : 
\end_layout

\begin_layout Subsubsection
First type
\end_layout

\begin_layout Standard
The dataset contains a list of IPs, it may also give the date of generation
 of the report, it will be extracted too.
\end_layout

\begin_layout Standard
This type require:
\end_layout

\begin_layout Itemize
The function 
\emph on
parse
\emph default
: extract the IPs 
\end_layout

\begin_layout Itemize
A variable 
\emph on
datetime
\emph default
: if possible extracted of the file.
 If there is no date in the file, the date will be set to 
\emph on
today
\emph default
 (datetime.date.today()).
 
\end_layout

\begin_layout Itemize
The variable 
\emph on
module_type
\emph default
 set to 1
\end_layout

\begin_layout Subsubsection
Second type
\end_layout

\begin_layout Standard
The reports provide more information on the attackers.
 They provide the IP but also the time of the attack, and the type attack
 (the name of the malware, if known).
 
\end_layout

\begin_layout Standard
This type require:
\end_layout

\begin_layout Itemize
The function parse which return a table of table with each line like: [IP,
 date, infection, rest of the line] 
\end_layout

\begin_layout Itemize
The variable module_type set to 2
\end_layout

\begin_layout Paragraph
Note
\end_layout

\begin_layout Standard
the atlas report is an XML file, the information we need are extracted of
 the file and saved as a string in the database.
 Shadowserver is a CSV report, the whole line will be pushed in the database.
\end_layout

\begin_layout Subsection
Automation
\end_layout

\begin_layout Standard
The automation is almost done through the configuration file but if you
 write a new module, you will have to edit 
\emph on
lib/modules/__init__.py
\emph default
 and append the module to import first.
 
\end_layout

\begin_layout Subsubsection
Downloading
\end_layout

\begin_layout Standard
It is not always possible to download automatically the new datasets but
 if it is public, you just have to edit 
\emph on
etc/bgp-ranking.conf
\emph default
 and add in the section 
\emph on
raw_fetching
\emph default
 an entry like:
\end_layout

\begin_layout LyX-Code
uniq_name = module directory URL
\end_layout

\begin_layout Standard
And restart the service 
\emph on
etc/init.d/start_fetch_raw_files.py
\emph default
.
\end_layout

\begin_layout Subsubsection
Parsing
\end_layout

\begin_layout Standard
To start a process watching in the root directory of a new module, edit
 
\emph on
etc/bgp-ranking.conf
\emph default
 and add in the section 
\emph on
modules_to_parse
\emph default
 an entry like:
\end_layout

\begin_layout LyX-Code
classname = impact
\end_layout

\begin_layout Standard
impact is the weight of the new module on the global ranking.
 
\end_layout

\begin_layout Standard
And restart the service 
\emph on
etc/init.d/start_parse_raw_files.py
\emph default
.
\end_layout

\begin_layout Subsection
Other Features
\end_layout

\begin_layout Subsubsection
Configuration
\end_layout

\begin_layout Standard
All the configuration is defined in 
\emph on
etc/bgp-ranking.conf
\emph default
.
 You can almost configure all the system.
 More details in the file itself.
 
\end_layout

\begin_layout Subsubsection
Modularity 
\end_layout

\begin_layout Standard
You can run each initscript in the order you want: they are all totally
 independent.
 
\end_layout

\begin_layout Description
Example the parsing will not be done until the files are fetched but if
 the parsing service has nothing to do, it will just wait a certain amount
 of seconds (defined in the configuration file) and check again if there
 is something to do.
 
\end_layout

\begin_layout Standard
Because the sharing of the information between the services is done using
 Redis it is possible to run each part of the system on a different computer.
 
\end_layout

\begin_layout Subsubsection
Multiprocessing
\end_layout

\begin_layout Standard
Except the fetching of the datasets, each part of the system support multiproces
sing: for each service, you can configure the number of process in the configura
tion file.
\end_layout

\begin_layout Section
Whois server
\begin_inset CommandInset label
LatexCommand label
name "sec:Whois-server"

\end_inset


\end_layout

\begin_layout Standard
This is an other project, all the details will not be given in this document,
 only the most important points.
 
\end_layout

\begin_layout Subsection
Context
\end_layout

\begin_layout Standard
Querying the whois servers through the Internet has two disadvantage: 
\end_layout

\begin_layout Enumerate
it takes a big amount of time: some queries take almost one second.
 With the number of query we have to do, it is a impossible.
 
\end_layout

\begin_layout Enumerate
after a certain amount of queries (around 10.000) some servers will blacklist
 our IP
\end_layout

\begin_layout Standard
The project is fully opensource 
\begin_inset CommandInset citation
LatexCommand cite
key "whois_server"

\end_inset

.
 
\end_layout

\begin_layout Subsection
Goal
\end_layout

\begin_layout Standard
The most challenging part of the whois server is that it has to be faster
 than the querying through the Internet.
\end_layout

\begin_layout Subsection
Algorithms
\end_layout

\begin_layout Standard
To initialize the whois database, we will re-use many of the libraries developed
 for the Ranking system:
\end_layout

\begin_layout Itemize
File splitter (
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:File-splitting"

\end_inset

) to use many processes to initialize the database
\end_layout

\begin_layout Itemize
IP keys generator (
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:IPs-Keys-generator"

\end_inset

) to generate the IP keys 
\end_layout

\begin_layout Itemize
Whois parser (
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:Whois-Parser"

\end_inset

) to split the entries of the dump
\end_layout

\begin_layout Standard
Because all the databases dumps are very different, all the scripts to initializ
e the databases have many differences but the idea is always the same: each
 IP block has a unique identifier and Keys of entries associated to the
 block look like this in redis: 
\end_layout

\begin_layout LyX-Code
<unique_id>:<entry_name> - <entry_key>
\end_layout

\begin_layout Description
Example: 
\family typewriter
1:owner - RIPE-1234
\end_layout

\begin_layout Standard
The entry key is used to extract the information on the key.
 
\end_layout

\begin_layout Description
Example: 
\family typewriter
RIPE-1234 - <information on the key>
\end_layout

\begin_layout Standard
The entry names are as normalized as possible: like this we just have to
 define a list of names and try to get all of them when a client makes a
 query and return a dump of all the strings extracted from the database.
 
\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Standard
With a local whois server, the queries takes always the same time: around
 0.05 seconds.
 It is 5 times faster than the querying in 
\begin_inset Quotes eld
\end_inset

keepalive mode
\begin_inset Quotes erd
\end_inset

 of the RIPE and almost 20 times than the 
\begin_inset Quotes eld
\end_inset

normal mode
\begin_inset Quotes erd
\end_inset

 offered by the other servers.
 
\end_layout

\begin_layout Subsection
Problems
\end_layout

\begin_layout Standard
A whois server needs a big amount of memory: we have to generate a lot of
 keys to be able to link all the information together and at the end, the
 whois database of the RIPE needs almost 3Gb of ram.
 If we want to have all the whois databases on a single server, it will
 need at least 8Gb (it is just an estimation).
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Generating the tables takes a lot of time: depending on the size of the
 dumb, it may need around one hour.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
An other quite annoying problem is that on a 32bits system, it is not possible
 for a single process to use more than 4Gb of memory 
\begin_inset CommandInset citation
LatexCommand cite
key "memory_limit"

\end_inset

, even with a PAE kernel which allow the whole system to recognize until
 64Go of memory.
 This problem can be solved by using a 64bits system.
 
\end_layout

\begin_layout Subsection
Improvements
\end_layout

\begin_layout Standard
It is actually not possible to do queries on ASNs.
 This functionality will be implemented as soon as possible.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
We actually do not have a dump of all the whois databases: only the RIPE,
 ARIN and LACNIC gave us a dump, AFRINIC and APNIC do not.
 It would be great to program the rest of the modules and to be able to
 run on a single server all the databases.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
A website may be developed in the future.
 
\end_layout

\begin_layout Section
Website
\end_layout

\begin_layout Subsection
Used technologies 
\end_layout

\begin_layout Paragraph
Cheetah 
\begin_inset CommandInset citation
LatexCommand cite
key "cheetah"

\end_inset


\end_layout

\begin_layout Standard
is a templates system in python, it allows us to generate pages on the fly.
 
\end_layout

\begin_layout Paragraph
Cherry-py 
\begin_inset CommandInset citation
LatexCommand cite
key "cherrypy"

\end_inset


\end_layout

\begin_layout Standard
is a web server able to use the cheetah templates.
 
\end_layout

\begin_layout Subsection
Status
\end_layout

\begin_layout Standard
The website is a work in progress.
 It is possible to do the following the tasks on the website: 
\end_layout

\begin_layout Itemize
View the 
\begin_inset Quotes eld
\end_inset

worst ASNs
\begin_inset Quotes erd
\end_inset

 of the last 24 hours, by sources and a merged view of all sources.
 
\end_layout

\begin_layout Itemize
Display a graph of a list of ASNs, by sources and a merged view of all sources.
 
\end_layout

\begin_layout Itemize
Display a graph for a particular ASN, using all the entries of the history
\end_layout

\begin_layout Itemize
Display the latest IPs (last 24 hours) found for a particular ASNs, their
 block and the description of the ASN
\end_layout

\begin_layout Section
Known bugs and problems
\end_layout

\begin_layout Subsection
Handling old datasets
\begin_inset CommandInset label
LatexCommand label
name "sub:Handling-old-datasets"

\end_inset


\end_layout

\begin_layout Standard
It is possible but not totally implemented and we will have a nasty problem:
 the association between the IP and the ASN is based on the actual version
 of the RIS Whois database and this database evolve quite often.
 If we want to be able to import old data we need also to implement a module
 which will use the corresponding version of the BGP Routing table.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
It is possible to solve this problem but it will be quite complicated and
 not very useful.
 This functionality will be not implemented in a near future.
\end_layout

\begin_layout Subsection
IPv6 and ranking
\end_layout

\begin_layout Standard
IPv6 is fully supported by the aggregation system but not for the ranking:
 we need first to find an other formula because the size of the assignations
 by ASN is so big in IPv6 that the result of the division of the number
 of IPs found by the number total of IPs is almost zero.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
This problem will be fixed as soon as possible.
 
\end_layout

\begin_layout Part
Usage
\end_layout

\begin_layout Section
Installation
\end_layout

\begin_layout Standard
The ranking system needs some other applications to work.
 The following has been tested with Ubuntu 10.4 and will work with other
 distributions but some of the name will changes and it is possible that
 you have other dependencies.
 
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
All the dependencies are opensource and freely available on the Internet.
 
\end_layout

\begin_layout Subsubsection
Package of the depots
\end_layout

\begin_layout Standard
Some of the dependencies are available in the depots, we usually chose this
 method because it is easier.
 
\end_layout

\begin_layout Standard
It is the case for the five following Python libraries (the names are the
 names of the packages in Ubuntu) :
\end_layout

\begin_layout Itemize
python-ipy 
\begin_inset CommandInset citation
LatexCommand cite
key "IPy"

\end_inset

: allow us to do many operations on the IP addresses (normalize, cast...),
 works in IPv4 and IPv6
\end_layout

\begin_layout Itemize
python-dateutil 
\begin_inset CommandInset citation
LatexCommand cite
key "dateutil"

\end_inset

: used to convert a string to a date, recognize a lot of string representations.
\end_layout

\begin_layout Itemize
python-elixir
\begin_inset CommandInset citation
LatexCommand cite
key "elixir"

\end_inset

: the library implementing the Active Record model pattern to access to
 the database
\end_layout

\begin_layout Itemize
python-mysqldb
\begin_inset CommandInset citation
LatexCommand cite
key "mysqldb"

\end_inset

: the python connector to MySQL (if you decide to use an other database,
 you will need an other connector
\end_layout

\begin_layout Itemize
python-feedparser 
\begin_inset CommandInset citation
LatexCommand cite
key "feedparser"

\end_inset

: used to parse the entries coming from Atlas, which are provided as RSS
 feeds
\end_layout

\begin_layout Standard
The following packages are not directly used by the application but are
 used to compile other programs: 
\end_layout

\begin_layout Itemize
build-essential 
\begin_inset CommandInset citation
LatexCommand cite
key "build essential"

\end_inset

: meta-package installing GCC, make...
 and all the necessary packages necessary to compile a program
\end_layout

\begin_layout Itemize
zlib1g-dev 
\begin_inset CommandInset citation
LatexCommand cite
key "zlib1g"

\end_inset

 and libbz2-dev 
\begin_inset CommandInset citation
LatexCommand cite
key "libbz2"

\end_inset

: dependencies of libbgpdump
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection
Package outside the depots
\end_layout

\begin_layout Standard
The depots usually contains not the latest version of the packages but it
 is sometimes important for us to use some functionalities only present
 in the latest version of the application.
 
\end_layout

\begin_layout Standard
It is the case for this two programs: 
\end_layout

\begin_layout Itemize
cheetah 
\begin_inset CommandInset citation
LatexCommand cite
key "cheetah"

\end_inset

: it is the templates system used by the website.
 The version 2.4.2 is necessary.
\end_layout

\begin_layout Itemize
cherry-py 
\begin_inset CommandInset citation
LatexCommand cite
key "cherrypy"

\end_inset

: it is the server supporting the cheetah templates and we need at least
 the version 3.1.2
\end_layout

\begin_layout Standard
An other possibility is that the needed program does not exists in the depots:
 
\end_layout

\begin_layout Itemize
libbgpdump 
\begin_inset CommandInset citation
LatexCommand cite
key "libbgpdump"

\end_inset

: generate a dump of the RIS routing database from the MRT format to plain
 text
\end_layout

\begin_layout Itemize
Rgraph 
\begin_inset CommandInset citation
LatexCommand cite
key "rgraph"

\end_inset

: generate graphs in javascript
\end_layout

\begin_layout Subsubsection
Live versions
\end_layout

\begin_layout Standard
For some programs we want to use the very latest version of the program:
 
\end_layout

\begin_layout Itemize
redis 
\begin_inset CommandInset citation
LatexCommand cite
key "redis"

\end_inset

: the version 1.2.6 is quite slow and the version 2.X is already very stable
 and usable.
 The ranking system is actually using the trunk but it is also possible
 to use the version 2.0 when it will be released.
 
\end_layout

\begin_layout Itemize
redis-py 
\begin_inset CommandInset citation
LatexCommand cite
key "redis-py"

\end_inset

: the python wrapper for redis.
 We are using the live version for the server, the client has to support
 and use the latest functionalities that offer the server.
 
\end_layout

\begin_layout Itemize
whois server 
\begin_inset CommandInset citation
LatexCommand cite
key "whois_server"

\end_inset

: necessary only if you want to use it.
 Allow you to do whois queries in local but need a lot of memory.
 
\end_layout

\begin_layout Subsection
Ranking system
\end_layout

\begin_layout Standard
When all the libraries/programs are installed, you will be able to run the
 ranking system.
 
\end_layout

\begin_layout Subsubsection
Services
\end_layout

\begin_layout Standard
First of all, you will have to be sure that the MySQL and the redis server
 are running.
 Feel free to tweak the default configuration of the both servers but the
 default configuration works fine.
 
\end_layout

\begin_layout Standard
You should create on MySQL a user and allow him to do at least the following
 operations: CREATE TABLE, CREATE INDEX, SELECT and UPDATE.
 Of course, you can use the root user but it is always better to create
 a dedicated user for the different services running on the server.
 
\end_layout

\begin_layout Standard
When it is done, create as root two databases: one for the data and the
 other for the ranking.
 
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
If you want to use the whois server and when the redis server is started
 you have first to initialize the database with the sources you want (RIPE,
 ARIN, LACNIC).
 To do it, launch the following scripts, depending on your needs: 
\emph on
lib/init/init_{arin,ripe,lacnic}.py
\end_layout

\begin_layout Standard
And start the listener by launching this script: 
\emph on
etc/init.d/start_whois_server.py
\end_layout

\begin_layout Subsubsection
Configure the system
\end_layout

\begin_layout Standard
First of all, you have to fetch the project, it is in a git repository.
 To get it, do the following: 
\end_layout

\begin_layout LyX-Code
git clone git://gitorious.org/bgp-ranking/bgp-ranking.git bgp-ranking 
\end_layout

\begin_layout LyX-Code
cd bgp-ranking
\end_layout

\begin_layout Standard
The configuration is in 
\family typewriter
etc/bgp-ranking.conf
\family default
 and there is at least two things you want to change: the root directory
 of the application.
 it you are in the directory bgp-ranking, just do 
\family typewriter
pwd
\family default
 and replace the actual value by the result.
 The second is the MySQL section: set your own user, password and the correct
 names for the databases.
 
\end_layout

\begin_layout Standard
As you can see, you can modify a lot of variables, most of them should not
 be changed but you can for example increase or reduce the number of processes
 or activate the fetching of whois entries.
 
\end_layout

\begin_layout Subsubsection
Initialize the databases
\end_layout

\begin_layout Standard
The last point before starting the system is to initialize the databases
 by using the scripts present in 
\emph on
lib/db_init
\emph default
: 
\emph on
init_ranking.py
\emph default
 and 
\emph on
init_voting.py
\emph default
 will respectively initialize the database containing the data and the database
 containing the history.
 
\end_layout

\begin_layout Standard
You have also to initialize a redis database containing the assignations
 of IP addresses to the whois servers (
\emph on
init_assignations_redis.py
\emph default
).
\end_layout

\begin_layout Section
Start the application
\end_layout

\begin_layout Subsection
General information
\end_layout

\begin_layout Standard
All the initscripts are in 
\emph on
etc/init.d
\emph default
, they are all totally independent and you can start each of them in the
 order you want.
 
\end_layout

\begin_layout Description
Example: the parsing will not be done until the files to parse are fetched
 but if the parsing service does not find a file to parse, it will just
 wait a certain amount of seconds (defined in the configuration file) and
 check again later if there is something to do.
 
\end_layout

\begin_layout Standard
Because the sharing of the information between the services is done using
 Redis it is possible to run each part of the system on a different computer.
\end_layout

\begin_layout Standard
Except the fetching of the datasets, each part of the system support multiproces
sing: for each service, you can configure the number of process in the configura
tion file.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Launching
\end_layout

\begin_layout Standard
This scripts have always to be started: 
\end_layout

\begin_layout Itemize

\emph on
start_fetch_bview.py
\emph default
: start a process that fetch the dump of the routing database and put it
 in the directory checked by 
\emph on
start_push_update_routing.py
\emph default
 if the dump is new
\end_layout

\begin_layout Itemize

\emph on
start_fetch_raw_files.py
\emph default
: start a process that fetch the raw files from the sources and put it in
 the directory checked by 
\emph on
start_parse_raw_files.py
\emph default
 if the file is new (more information chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Fetching-the-datasets"

\end_inset

)
\end_layout

\begin_layout Itemize

\emph on
start_parse_raw_files.py
\emph default
: start a process that parse the raw files, more information chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Parsing-the-datasets"

\end_inset


\end_layout

\begin_layout Itemize

\emph on
start_get_ris_entries.py
\emph default
: start the process described chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Getting RIS Whois"

\end_inset


\end_layout

\begin_layout Itemize

\emph on
start_fetch_whois_entries.py
\emph default
: start the process described chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Fetching-ris-whois"

\end_inset


\end_layout

\begin_layout Itemize

\emph on
start_push_update_routing.py
\emph default
: start a process that check if there is any new routing dump.
 If there is a new, it will be pushed into the database.
 The second part of this script will compute the ranking based on the informatio
n of the last 24 hours 
\end_layout

\begin_layout Standard
This two scripts are not absolutely necessary, they will just allow us to
 fetch the whois entries.
 They can not start if this fetching is deactivated in the configuration
 file :
\end_layout

\begin_layout Itemize
start_get_whois_entries.py: start the process also described chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Getting RIS Whois"

\end_inset


\end_layout

\begin_layout Itemize
start_sort_whois_queries.py: start the process described chapter 
\begin_inset CommandInset ref
LatexCommand vref
reference "sub:Sorting whois"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Part
Improvements and future usage
\end_layout

\begin_layout Section
Improvements 
\end_layout

\begin_layout Subsection
Databases
\end_layout

\begin_layout Standard
The first change to do on the databases will be to merge the two, the one
 containing the data of the datasets and the one containing the ranking:
\end_layout

\begin_layout Itemize
there is a table containing only the sources in the ranking database.
 This sources are also present in the dataset database, as field.
 It will be merged
\end_layout

\begin_layout Itemize
the ASN table of the dataset will be used in the ranking database: the History
 table has a field containing the ASN.
 
\end_layout

\begin_layout Subsection
Configuration
\end_layout

\begin_layout Standard
It is actually possible to modify the weight of a source through the configurati
on file, and only through it.
 When it is changed, the graphs are automatically redraw.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
The improvement will be to give the possibility to the user to change this
 weight directly through the website.
 
\end_layout

\begin_layout Subsection
Importing datasets
\begin_inset CommandInset label
LatexCommand label
name "sub:Importing-datasets"

\end_inset


\end_layout

\begin_layout Standard
Actually, to be able to import new datasets, you have to write a sub-class
 to ip_update.
 The problem is that you have to understand how this class works and it
 is not that easy.
 
\end_layout

\begin_layout Standard
A big improvement would be to use a redis database as interface between
 the modules and the class that push the new raw data in the database.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename new_modules.dia
	lyxscale 40
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
New type of modules
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsubsection
Basics 
\end_layout

\begin_layout Standard
For each new entry, we need at least two information: 
\end_layout

\begin_layout Itemize
an IP address
\end_layout

\begin_layout Itemize
the source of the IP
\end_layout

\begin_layout Standard
A third information is very important but if the module does not give it,
 it will be set to 
\begin_inset Quotes eld
\end_inset

today
\begin_inset Quotes erd
\end_inset

: the timestamp
\end_layout

\begin_layout Standard
There is two other fields but they only exist on some particular datasets:
\end_layout

\begin_layout Itemize
the type of the infection 
\end_layout

\begin_layout Itemize
a text containing other fields, separated by semicolons
\end_layout

\begin_layout Subsubsection
Format 
\end_layout

\begin_layout Standard
It is not possible to put directly the IP into the set used by the process
 pushing the new entries into the database for the simple reason that it
 is possible to have the same IP more than one time at the same moment:
 if it comes from different sources.
 The entries put in the set called 
\emph on
ip
\emph default
 will have this format: 
\emph on
<ip>_<source>
\emph default
 because if the same IP is present more than one time in a particular dataset,
 the module should silently remove the next occurrences.
 
\end_layout

\begin_layout Description
Note each module has to ensure that if the same IP is present more than
 one time in a dataset, it will not be pushed in the redis database.
 
\end_layout

\begin_layout Standard
And if possible the module will push into redis an entry for this other
 fields:
\end_layout

\begin_layout LyX-Code
<ip>_<source>:timestamp -> timestamp (timestamp in UTC)
\end_layout

\begin_layout LyX-Code
<ip>_<source>:infection -> infection
\end_layout

\begin_layout LyX-Code
<ip>_<source>:raw -> other in formations
\end_layout

\begin_layout Subsubsection
Multiprocessing
\end_layout

\begin_layout Standard
Every module can work at the same time.
 
\end_layout

\begin_layout Standard
The process pushing the new entries into the MySQL database will look in
 the 
\emph on
ip
\emph default
 set and pick the new entries if it find something.
 
\end_layout

\begin_layout Description
WARNING: The modules have to push first all the other fields 
\series bold
before
\series default
 pushing the IP into the set, elsewhere we will have inconsistent entries.
\end_layout

\begin_layout Subsubsection
Advantages
\end_layout

\begin_layout Standard
This way, it would be possible to write modules in the language you want
 and just push the new information into redis.
 The new module will just have to respect a format but will be completely
 independent of the existing code.
 
\end_layout

\begin_layout Standard
It would also be possible to push new data directly through the network,
 from sensors.
 
\end_layout

\begin_layout Subsection
Modules
\end_layout

\begin_layout Standard
When the new modules system will be implemented, some new modules will arrive:
 it would be for example very easy to use the logs generated by fail2ban
 which block the IP addresses of clients attempt to do SSH brute force on
 servers.
 
\end_layout

\begin_layout Subsection
Ranking
\end_layout

\begin_layout Standard
It is actually only possible to obtain a ranking by ASN.
 In a near future, a ranking by subnet will be implemented.
 
\end_layout

\begin_layout Standard
It is also planed to permit to the user to vote against a particular AS.
 It will soon be possible to see the ranking with and without the weight
 given by the other users.
 
\end_layout

\begin_layout Subsection
Website
\end_layout

\begin_layout Standard
There is a lot of work to do on the website: the rendering is actually very
 static.
 It would be interesting to see the details of a certain AS during a certain
 amount of time, or only the graph for a particular subnet.
 
\end_layout

\begin_layout Standard
Everything is possible: all this information are saved in the database and
 it is possible to do query on it.
 As soon at possible, the website will be updated to allow the users to
 get more information.
 
\end_layout

\begin_layout Standard
To implement the voting system properly, the website need a login functionality
 to identify the users and allow them to vote.
 
\end_layout

\begin_layout Section
Future usages
\end_layout

\begin_layout Standard
It is difficult to say but the most obvious usage will be the generation
 of blacklists based on the ranking by ASN and subnets.
 
\end_layout

\begin_layout Standard
It is also thinkable to write a Firefox module that interrogate the server
 before connecting to a website to know if the IP is known or if there is
 a lot of suspicious IP in the same block or provided by the same AS.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "AS"
description "The classic definition of an Autonomous System is a set of routers under a single technical administration, using an interior gateway protocol (IGP) and common metrics to determine how to route packets within the AS, and using an inter-AS routing protocol to determine how to route packets to other ASes. Since this classic definition was developed, it has become common for a single AS to use several IGPs and, sometimes, several sets of metrics within an AS. The use of the term Autonomous System stresses the fact that, even when multiple IGPs and metrics are used, the administration of an AS appears to other ASes to have a single coherent interior routing plan, and presents a consistent picture of the destinations that are reachable through it. (RFC 4271)\\\\\\\\Shortly, an AS manages one or more prefixes and propagates all the prefixes he knows to the other ASes.\\\\\\\\Each AS is uniquely identified by an Autonomous System Number."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ASN"
description "Autonomous System Number it is a unique 16-bit number associated with one or more prefix(es)."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Prefix"
description "it is a network represented like this: first ip of the network/bit-length of the prefix\\\\Example: 192.168.0.0/24"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "ISP"
description "Internet Service Provider it has at least one autonomous system number (ASN) with or without prefixes announced. "

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "SO"
description "Satellite operator it is an ISP which provide an Internet access through satellites. "

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Data source"
description "it is the entity/company/person which provide a dataset. "

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Dataset"
description "it contains the most important part of the information used by the ranking system."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Whois entry"
description "the information given by a whois server when the system do a query on a particular IP. "

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "C\\&C"
description "Command and Control it is the infrastructure used by the bot master to control his botnet."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Botnet"
description "itis a group of computers used by criminal entities for nefarious purposes.\\\\"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Bot Master"
description "it is the person or the entity which control the botnet."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Malware"
description "All the nefarious softwares which can installed on a system."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "Peering"
description "exchange of traffic between ISPs, it is the base of the internet which makes the whole system working"

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "IANA"
description "The Internet Assigned Numbers Authority is the global entity controlling the assignation of IP addresses, AS numbers, Top-Level domains, and all IP related assignments."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset nomenclature
LatexCommand nomenclature
symbol "RIR"
description "The Regional Internet Registries manage the AS numbers and IPs assignations in their zones."

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
printnomenclature[0.8in]
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "peering_transit"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "How the 'Net works: an introduction to peering and transit"
target "http://arstechnica.com/old/content/2008/09/peering-and-transit.ars"

\end_inset

 - Ars Technica
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "art_peering"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "The Art of Peering: The Peering Playbook"
target "http://www.blogg.ch/uploads/peering-playbook.pdf"

\end_inset

 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "AS"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "RFC 4271"
target "http://ftp.rfc-editor.org/in-notes/rfc4271.txt"

\end_inset

: A Border Gateway Protocol 4 (BGP-4)
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BGP-policies"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "BGP Policies"
target "www.cs.princeton.edu/~jrex/papers/policies.pdf"

\end_inset

 - Matthew Caesar and Jennifer Rexford 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "asns_Overview"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Exploring Autonomous System Numbers"
target "http://www.cisco.com/web/about/ac123/ac147/archived_issues/ipj_9-1/autonomous_system_numbers.html"

\end_inset

 by Geoff Huston, APNIC in the The Internet Protocol Journal - Volume 9,
 Number 1 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "RIS"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Routing Information Service"
target "http://www.ripe.net/projects/ris/index.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Dshield-about"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "About Dshield"
target "http://www.dshield.org/about.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Arbor-faq"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "FAQ Arbor"
target "https://atlas.arbor.net/faq/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ZeuS-faq"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "FAQ ZeuS"
target "https://zeustracker.abuse.ch/faq.php"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Shadowserver-mission"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Shadowserver Mission"
target "http://www.shadowserver.org/wiki/pmwiki.php/Shadowserver/Mission"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "non-profit-malware"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Kaspersky Security Bulletin 2007"
target "http://www.kaspersky.com/reading_room?chapter=207716662"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "sell botnet"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Botnet price for hourly hire on par with cost of two pints"
target "http://www.zdnet.co.uk/news/security-threats/2010/05/25/botnet-price-for-hourly-hire-on-par-with-cost-of-two-pints-40089028/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "p2p-botnet"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "P2P Botnet"
target "http://honeyblog.org/archives/44-Walowdac-Analysis-of-a-Peer-to-Peer-Botnet.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "blackhole-malware"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Blackhole your malware"
target "http://www.theregister.co.uk/2010/08/13/sysadmin_black_hole/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Mapreduce"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "MapReduce"
target "https://secure.wikimedia.org/wikipedia/de/wiki/MapReduce"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "redis_official"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Redis Official Website "
target "https://code.google.com/p/redis/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "mongodb-agpl"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Why AGPLv3 - MongoDb"
target "http://blog.mongodb.org/post/103832439/the-agpl"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "divert_filter"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Divert filtering"
target "http://www.faqs.org/docs/Linux-mini/Divert-Sockets-mini-HOWTO.html#s4"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "ingress_filter"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "RFC 2827"
target "http://www.ietf.org/rfc/rfc2827.txt"

\end_inset

- Network Ingress Filtering: Defeating Denial of Service Attacks which employ
 IP Source Address Spoofing 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "BGP Ranking"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "BGP AS / ISP Security Ranking"
target "http://gitorious.org/bgp-ranking"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Flowspec"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "RFC 5575"
target "http://ftp.rfc-editor.org/in-notes/rfc5575.txt"

\end_inset

: Dissemination of Flow Specification Rules 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "SQLAlchemy-dbs"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "SQLAlchemy - Supported Databases"
target "http://www.sqlalchemy.org/docs/dbengine.html#supported-databases"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "active-record"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Active record pattern"
target "https://secure.wikimedia.org/wikipedia/en/wiki/Active_record_pattern"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Redis-types"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "A fifteen minutes introduction to Redis data types"
target "https://code.google.com/p/redis/wiki/IntroductionToRedisDataTypes"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "MRT-RFC"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "MRT routing information export format"
target "http://tools.ietf.org/html/draft-ietf-grow-mrt-11"

\end_inset

 - Version 11
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "libbgpdump"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Source of libbgpdump"
target "http://www.ris.ripe.net/source/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "pywhois"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Official Website of pywhois"
target "https://code.google.com/p/pywhois/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "whois_server"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Official website of the new Whois Server"
target "http://gitorious.org/whois-server"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "memory_limit"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Maximum Memory and CPU Limitations for Linux Server"
target "http://www.cyberciti.biz/tips/maximum-memory-and-cpu-limitations-for-linux-server.html"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "cheetah"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Cheetah template"
target "http://www.cheetahtemplate.org/"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "cherrypy"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "CherryPy"
target "http://www.cherrypy.org/"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "IPy"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "IPy"
target "http://pypi.python.org/pypi/IPy/"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "dateutil"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "python-dateutil"
target "http://labix.org/python-dateutil"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "elixir"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Elixir"
target "http://elixir.ematia.de/trac/wiki"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "mysqldb"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "MySQLdb"
target "http://mysql-python.sourceforge.net/MySQLdb.html"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "feedparser"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Feedparser"
target "https://code.google.com/p/feedparser/"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "build essential"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Package build-essential"
target "ttp://packages.ubuntu.com/de/lucid/build-essential"

\end_inset

 - On Ubuntu
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "zlib1g"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Package zlib1g-dev"
target "http://packages.ubuntu.com/lucid/zlib1g-dev"

\end_inset

 - On Ubuntu
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "libbz2"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Package libbz2-dev"
target "http://packages.ubuntu.com/lucid/libbz2-dev"

\end_inset

 - On Ubuntu
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "rgraph"

\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://www.rgraph.net/"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "redis"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Redis"
target "https://code.google.com/p/redis/"

\end_inset

 - Official Website
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "redis-py"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Redis-py"
target "http://github.com/andymccurdy/redis-py"

\end_inset

 - Official Website
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\start_of_appendix
Example of BGP Entry : 
\begin_inset CommandInset label
LatexCommand label
name "Example-of-BGP"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
TIME: 07/19/10 08:00:00 
\end_layout

\begin_layout Standard
TYPE: TABLE_DUMP_V2/IPV4_UNICAST 
\end_layout

\begin_layout Standard

\series bold
PREFIX: 41.138.240.0/21 
\end_layout

\begin_layout Standard
SEQUENCE: 10022 
\end_layout

\begin_layout Standard
FROM: 91.103.24.2 AS42109 
\end_layout

\begin_layout Standard
ORIGINATED: 07/18/10 23:36:39 
\end_layout

\begin_layout Standard
ORIGIN: IGP 
\end_layout

\begin_layout Standard

\series bold
ASPATH: 42109 41965 41877 3356 174 42652 12684 12684 
\end_layout

\begin_layout Standard

\series bold
NEXT_HOP: 91.103.24.2 
\end_layout

\begin_layout Standard
COMMUNITY: 3356:2 3356:22 3356:86 3356:503 3356:666 3356:2067 
\end_layout

\begin_layout Standard

\lyxline

\end_layout

\begin_layout Standard
The riswhois entry of 74.125.43.99 the 30th of August 2010:
\begin_inset CommandInset label
LatexCommand label
name "riswhois entry google"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
route:         74.125.42.0/23
\end_layout

\begin_layout Standard

\series bold
origin:        AS15169
\end_layout

\begin_layout Standard

\series bold
descr:        GOOGLE - Google Inc.
\end_layout

\begin_layout Standard
lastupd-frst:  2010-03-18 20:10Z 202.249.2.20@rrc06
\end_layout

\begin_layout Standard
lastupd-last:  2010-08-29 19:50Z 80.81.192.220@rrc12
\end_layout

\begin_layout Standard
seen-at:       rrc00,rrc01,rrc03,rrc04,rrc05,rrc06,rrc07,rrc10,rrc11,rrc12,rrc13
,rrc14,rrc15,rrc16
\end_layout

\begin_layout Standard
num-rispeers:  103
\end_layout

\begin_layout Standard
source:        RISWHOIS
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
enlargethispage{1cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename uml-diagramms/RIS Fetching.png
	lyxscale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get RIS Whois entries
\begin_inset CommandInset label
LatexCommand label
name "fig:Get-RIS-Whois"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
enlargethispage{1cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename uml-diagramms/Whois Fetching.png
	lyxscale 50
	scale 65

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Get Whois entries
\begin_inset CommandInset label
LatexCommand label
name "fig:Get-Whois-entries"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
enlargethispage{0cm}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename global.dia
	lyxscale 30
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Technical-global-view"

\end_inset

Technical global view
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename Ranking.dia
	lyxscale 30
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Technical-global-view-Ranking"

\end_inset

Technical global view - Ranking
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\end_body
\end_document
