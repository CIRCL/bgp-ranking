*****************
Cheat Sheet Redis
*****************

In this document I will give you the most important commands to play with 
the Redis database(s) of BGP Ranking. 

Introduction
============

Connection to a database: 

	::

		redis-cli -n <id>

If you are already connected to an other db of the same instance: 
	
	::
        
		select <id>

Connection to an instance:

	::
	
		redis-cli -p <port>

You can pass all the following command directly in your terminal like this: 

	::

		redis-cli <options> <command>


Example: 
	
	::

		redis-cli -n 0 get "uid"

.. warning::
    Please note that on the default installation, the databases 0 to 3 are on the
    cache instance, which runs on the port 6382.

Database 0 
==========

Get the amount of new entries from the datasets to insert:

	::
	
		scard uid_list

If the uid_list is empty and you have more than one key in the db (uid), 
you can drop them using 'del': the system has been stopped when it was 
running and the keys are "dead"
	
	::
	
		del <key>

Get the amount of RIS Whois entries to fetch:

	::
	
		scard ris 

Get the amount of Whois entries to fetch (deactivated by default):

	::
	
		scard whois

See if there is some old entries without AS: 

	::
	
		keys "temp|*"

If they are not from "today", you can drop them: the system has 
been stopped when it was running and this keys will never be associated 
with an AS.

Amount of new entries without ASN: 
	
	::
	
		scard no_asn


Databases 1 and 2
=================

You have nothing to do there, they contains cached entries of (RIS) Whois 
entries...

If the db1 is empty, you have no cache at all, it should never append if 
the system is running since more than 30 min.

The db2 will probably always be empty because the fetching of Whois entries 
is deactivated

Database 3
==========

It only contains keys when the system compute a ranking: a dump of the RIS 
database of the RIPE. 

Database 4
==========

It should never be empty, if it is, you will not be able to fetch any 
RIS Whois entries and it will provoke IO errors in the logs. 

~3000 keys is a right amount.

Database 5
==========

Contains all the entries from the datasets.

All the sources of a day:

	::
	
		smembers YYYY-MM-DD|sources

Get the key of the subnets announced by an AS: 

	::

		smembers <ASN>

Get the subnet/desctiption of a subnet: 
	
	::
	
		get <one of the response of the last command>|{owner,ips_block}

Get the number of subnets for a source/day: 

	::
	
		scard YYYY-MM-DD|source|index_asns_details

Get the number of ASNs  for a source/day: 

	::
	
		scard YYYY-MM-DD|source|index_asns

Get the number of IPs for an ASN/source/day:

	::	
	
		scard <asn>|YYYY-MM-DD|source

Database 6
==========

Number of ranks to compute:

	::
	
		scard to_rank

Get all the ranks for a particular AS /date/source/type (type can be v4 or v6):

	::
	
		smembers <asn>|YYYY-MM-DD|<source>|{v4,v6}

The rank for all the subnets of an AS /date/source/type (as soon as it will be implemented) :

	::
		
		zrange <asn>|YYYY-MM-DD|<source>|{v4,v6}|details 0 -1 WITHSCORES

The top ranking generated by lib/ranking/reports.py: 

	::
    
		zrange <source>|{v4,v6} 0 50 WITHSCORES


You can also use:

	::

		zrange <global>|{v4,v6} 0 50 WITHSCORES

To get the global rankng (all the sources are merged)

